<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software as a Craft</title>
    <description>The development blog of tamouse</description>
    <link>http://swaac.tamouse.org/</link>
    <atom:link href="http://swaac.tamouse.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 29 Jul 2017 10:12:48 -0500</pubDate>
    <lastBuildDate>Sat, 29 Jul 2017 10:12:48 -0500</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>PP 1: Define the Problem Completely</title>
        <description>&lt;p&gt;Continuing in the Programming Proverb series, by Henry F. Ledgard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#programming-proverb-1-define-the-problem-completely&quot; id=&quot;markdown-toc-programming-proverb-1-define-the-problem-completely&quot;&gt;Programming Proverb #1: Define the problem completely.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#successive-iterations-on-problem-definition&quot; id=&quot;markdown-toc-successive-iterations-on-problem-definition&quot;&gt;Successive Iterations on Problem Definition&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#but-whats-complete-enough&quot; id=&quot;markdown-toc-but-whats-complete-enough&quot;&gt;But what’s complete enough?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-what-is-the-item-to-be-created&quot; id=&quot;markdown-toc-1-what-is-the-item-to-be-created&quot;&gt;1: What is the item to be created&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-what-will-the-item-be-used-for-and-who-will-use-it&quot; id=&quot;markdown-toc-2-what-will-the-item-be-used-for-and-who-will-use-it&quot;&gt;2: What will the item be used for (and who will use it)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-how-will-we-know-the-item-meets-the-needs-of-1-and-2&quot; id=&quot;markdown-toc-3-how-will-we-know-the-item-meets-the-needs-of-1-and-2&quot;&gt;3: How will we know the item meets the needs of 1 and 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about-problems-we-dont-know-or-understand-completely&quot; id=&quot;markdown-toc-what-about-problems-we-dont-know-or-understand-completely&quot;&gt;What about problems we don’t know or understand completely?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;programming-proverb-1-define-the-problem-completely&quot;&gt;Programming Proverb #1: Define the problem completely.&lt;/h2&gt;

&lt;p&gt;This seems obvious, but it happens so often that we, as programmers,
begin to solve the problem sometimes even before it’s even
requested. Getting specifications is also hard, because it involves
talking about the desired result with people who don’t necessarily
speak our language.&lt;/p&gt;

&lt;p&gt;Problem-solving is fun, especially writing programs to do so. And yet,
the landscape is littered with software that didn’t solve the problem
it was intended for, or that cause new problems that didn’t exist
before.&lt;/p&gt;

&lt;h2 id=&quot;successive-iterations-on-problem-definition&quot;&gt;Successive Iterations on Problem Definition&lt;/h2&gt;

&lt;p&gt;Getting the specifications down as completely as possible is one of
those things that seems to fly in the face of agile programming, but
in fact it doesn’t. Each epic, story, task, chore, should strive to
get a complete enough statement of the problem to provide the
developer and the tester the ability to successfully complete it.&lt;/p&gt;

&lt;p&gt;Because we’ve learned that trying to get complete answers before we
begin often leads to overdesign and overspending for little value at
the end of the implementation, take an interative approach to problem
definition, along with everything else. This proverb, as all the
others we’ll see, isn’t intended to be taken by itself, all alone.&lt;/p&gt;

&lt;h2 id=&quot;but-whats-complete-enough&quot;&gt;But what’s complete enough?&lt;/h2&gt;

&lt;p&gt;People have different levels of understanding of problems; obvious
enough. If you’re writing a story you’re going to implement, it’s
likely that you’ll think you need a lot less information in the ticket
than if you were planning on having someone else implement it. The
fact is, though, that at the time we’re implementing the ticket, we’re
almost certainly removed from the moment we wrote it, and if it’s
someone else implementing, they may have never been in the
conversation. So it does make sense to be as thorough as you can in
stating the work to be done, and stating what success means for that
particular item.&lt;/p&gt;

&lt;p&gt;Complete enough needs to consist of answers to three questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is the feature to be created&lt;/li&gt;
  &lt;li&gt;What will the feature be used for (and who will use it)&lt;/li&gt;
  &lt;li&gt;How will we know the feature meets the needs of 1 and 2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unpacking each of those:&lt;/p&gt;

&lt;h2 id=&quot;1-what-is-the-item-to-be-created&quot;&gt;1: What is the item to be created&lt;/h2&gt;

&lt;p&gt;There are really an unlimited number of questions you could ask, but
it’s important that you ask questions about the item.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What should it do?&lt;/li&gt;
  &lt;li&gt;What’s the desired outcome?&lt;/li&gt;
  &lt;li&gt;What’s the range of input?&lt;/li&gt;
  &lt;li&gt;Where will it live?&lt;/li&gt;
  &lt;li&gt;Does it need anything else to work?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are meta questions to ask as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What information does the person implementing this need to know?&lt;/li&gt;
  &lt;li&gt;When should this item be implemented?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;h2 id=&quot;2-what-will-the-item-be-used-for-and-who-will-use-it&quot;&gt;2: What will the item be used for (and who will use it)&lt;/h2&gt;

&lt;p&gt;It’s important to understand why this item is being created, and who
cares about it. When you understand that, you have knowledge that
informs, directs, and constrains the solution.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Who uses the item? It may be an end user, an admin, another coder
(e.g. and API call), etc., the point is, there is &lt;em&gt;always&lt;/em&gt; someone
who’s going to use it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When, how, what will they use it for?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-how-will-we-know-the-item-meets-the-needs-of-1-and-2&quot;&gt;3: How will we know the item meets the needs of 1 and 2&lt;/h2&gt;

&lt;p&gt;This is the Test-Driven and Behaviour-Driven Testing part of the
problem definition. It’s the part where you validate the desired
outcome in the implementation of the item.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How are you going to know you’re done with the item?&lt;/li&gt;
  &lt;li&gt;How can you show you are done with the item?&lt;/li&gt;
  &lt;li&gt;How will you know you did not introduce new problems?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gherkin, the language of Cucumber, gives both the writer, the
implementer, and the verifier a common structure to work in, even if
it isn’t directly used in writing a test.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot; data-lang=&quot;gherkin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Users are able to log in to their accounts

  &lt;span class=&quot;kn&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Given&lt;/span&gt; I am a user with an account

  &lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt; I visit the login page
    &lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt; I enter my username
    &lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt; I enter my password
    &lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt; I press the submit button
    &lt;span class=&quot;nf&quot;&gt;Then&lt;/span&gt; I am directed to my profile page&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;what-about-problems-we-dont-know-or-understand-completely&quot;&gt;What about problems we don’t know or understand completely?&lt;/h2&gt;

&lt;p&gt;This is really the most common case in software development. We don’t
tend to write the same software over and over, we get new problems,
new users, new knowledge domains, new, new, new. If it’s already been
solved, we try to rework the existing solution.&lt;/p&gt;

&lt;p&gt;So, because we don’t, or maybe even can’t understand a problem
completely, how does this fit in the proverb?&lt;/p&gt;

&lt;p&gt;Here is where iterative development, agile, spikes, and such things
makes it possible to move forward with what we do know, and let the
other parts reveal themselves. Is this the opposite of the proverb? In
some ways of looking at it, yes, very much so. Even so, as we start
out, each of the initial stories, features, items, we work on should
be given enough scrutiny to make us successful in moving to the next
step.&lt;/p&gt;

&lt;p&gt;This proverb and the next go hand in hand. Problem definition requires
thinking.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 09:12:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/programming/2017/07/29/pp-1-define-the-problem-completely/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/programming/2017/07/29/pp-1-define-the-problem-completely/</guid>
        
        <category>programming</category>
        
        <category>proverbs</category>
        
        <category>problem-definition</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>PP: Programming Proverbs, an Introduction</title>
        <description>&lt;p&gt;Back in 1975, Henry F. Ledgard published a small book called
“Programming Proverbs”, a book of 26 best practices for programming,
using Algol 60 as the explanatory language. This was followed up with
“Pascal with Style: Programming Proverbs”, which restated the
practices using Pascal as the language, which was the one I found and
read, since I was using Pascal at the time in University.&lt;/p&gt;

&lt;p&gt;I read the book voraciously, small though it was. Ledgard’s proverbs
were very apt, and I was pretty well interested in writing good
quality code even back then, not really wanting to settle for good
enough to pass the class.&lt;/p&gt;

&lt;p&gt;Many years, decades even, have passed since that time, and I’ve found
many new authors to read, and have gotten great guidance from
them. And even so, that little book of proverbs has stuck in my head,
forming a real foundation from which to approach the craft of software
development.&lt;/p&gt;

&lt;p&gt;I’m going to write a series of posts on these programming proverbs,
with the title tag “PP”, and a tag of “proverbs” if you want to sort
them out later.&lt;/p&gt;

&lt;p&gt;In this introduction, I’m going to list the proverbs. Subsequent posts
will go into more depth on them.&lt;/p&gt;

&lt;h2 id=&quot;the-proverbs&quot;&gt;The Proverbs&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Define the problem completely.&lt;/li&gt;
  &lt;li&gt;Think first, program later.&lt;/li&gt;
  &lt;li&gt;Use the top-down approach.&lt;/li&gt;
  &lt;li&gt;Beware of other approaches.&lt;/li&gt;
  &lt;li&gt;Construct the program in logical units.&lt;/li&gt;
  &lt;li&gt;Use procedures.&lt;/li&gt;
  &lt;li&gt;Avoid unnecessary GOTOs.&lt;/li&gt;
  &lt;li&gt;Avoid side effects.&lt;/li&gt;
  &lt;li&gt;Get the syntax right now, not later.&lt;/li&gt;
  &lt;li&gt;Use good mnenonic names.&lt;/li&gt;
  &lt;li&gt;Use intermediate variables properly.&lt;/li&gt;
  &lt;li&gt;Leave loop variables alone.&lt;/li&gt;
  &lt;li&gt;Do not recompute constants within a loop.&lt;/li&gt;
  &lt;li&gt;Avoid implementation-dependent features.&lt;/li&gt;
  &lt;li&gt;Avoid tricks.&lt;/li&gt;
  &lt;li&gt;Build in debugging techniques.&lt;/li&gt;
  &lt;li&gt;Never assume the computer assumes anything.&lt;/li&gt;
  &lt;li&gt;Use comments.&lt;/li&gt;
  &lt;li&gt;Prettyprint.&lt;/li&gt;
  &lt;li&gt;Provide good documentation.&lt;/li&gt;
  &lt;li&gt;Hand-check the programming before running it.&lt;/li&gt;
  &lt;li&gt;Get the program correct before trying to produce good output.&lt;/li&gt;
  &lt;li&gt;When the program is correct, produce good output.&lt;/li&gt;
  &lt;li&gt;Reread the manual.&lt;/li&gt;
  &lt;li&gt;Consider another language.&lt;/li&gt;
  &lt;li&gt;Don’t be afraid to start over.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;updating-the-proverbs&quot;&gt;Updating the proverbs&lt;/h2&gt;

&lt;p&gt;You many note some of those proverbs seem quite archaic in the world
of software development we are in today. How many people &lt;em&gt;ever&lt;/em&gt; step
through their code by hand before subjecting it to the compiler /
interpretter / browser?&lt;/p&gt;

&lt;p&gt;Also, with the rise of test-driven development, perhaps it’s more
likely that your code will be running the moment you hit the “Save”
key.&lt;/p&gt;

&lt;p&gt;Before you dismiss these, consider not just the time and practice of
the day (1975 is likely longer ago than most of my readers have been
alive). Consider, really, the intent: there is a reason for all of
these, and I’ll be bring those ideas up to date as I cover them.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I owe a &lt;em&gt;great&lt;/em&gt; deal to Mr. Ledgard. I don’t know if he’s still with
us, but as a teacher of a very young and enthusiastic computer science
student back in the 1970’s, he meant a lot. As I write these, I know I
would not be anywhere near the craftsperson I am with him.&lt;/p&gt;

&lt;p&gt;As these works are no longer in print, I hope the spirit of sharing
these proverbs for helping new software developers acquire the
everyday skills of the craft will cause you to seek out these books,
in order to possibly get them updated and republished.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Jul 2017 12:24:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/programming/2017/07/23/pp-introduction/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/programming/2017/07/23/pp-introduction/</guid>
        
        <category>programming</category>
        
        <category>style</category>
        
        <category>proverbs</category>
        
        <category>craft</category>
        
        <category>improving</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>TIL: ApolloClient Authentication (graphql)</title>
        <description>&lt;p&gt;Continuing to work on the GraphQL Client and Server project at work,
today I learned how to authenticate using ApolloClient.&lt;/p&gt;

&lt;p&gt;(Note: there’s lots I’ve learned the past couple of weeks, but I
haven’t gotten to write everything up. This is just today’s big
learning.)&lt;/p&gt;

&lt;p&gt;It turns out that authenticating is rather easy when you’re working in
a same origin situation, i.e., the React Apollo client is calling an
endpoint from the same domain the React client was downloaded from.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://dev.apollodata.com/react/auth.html&quot;&gt;Authentication&lt;/a&gt; page
for the React Apollo client is very straight-forward in it’s
explanation. Since the application is using Cookies to keep the
authentication for the app, the following code works well:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// source: client/src/apolloClient.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApolloClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createNetworkInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-apollo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;networkInterface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createNetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/graphql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'same-origin'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApolloClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;networkInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The essential bit is tne &lt;code class=&quot;highlighter-rouge&quot;&gt;credentials: 'same-origin'&lt;/code&gt;
option. ApolloClient knows how to handle these and builds the request
header with the appropriate cookies.&lt;/p&gt;

&lt;p&gt;I’m sort of embarassed how long it took me to figure out that this was
the solution to the problem I was having, since all I was seeing was
an Internal Server Error.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jul 2017 02:19:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/graphql/2017/07/22/til-apolloclient-authentication-graphql/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/graphql/2017/07/22/til-apolloclient-authentication-graphql/</guid>
        
        <category>graphql</category>
        
        <category>react</category>
        
        <category>apollo-client</category>
        
        
        <category>graphql</category>
        
      </item>
    
      <item>
        <title>99 Bottles of OOP</title>
        <description>
</description>
        <pubDate>Fri, 07 Jul 2017 08:51:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/books/2017/07/07/99-bottles-of-oop/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/books/2017/07/07/99-bottles-of-oop/</guid>
        
        <category>books</category>
        
        <category>oop</category>
        
        <category>object-oriented-programming</category>
        
        <category>sandi-metz</category>
        
        <category>katrina-owen</category>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Playing games with the :checked pseudo-selector</title>
        <description>&lt;p&gt;I’m not sure what made me think of this, but I got a wild hair and
thought I’d try it out.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:checked&lt;/code&gt; CSS pseudo-selector lets you select a &lt;em&gt;checked&lt;/em&gt;
checkbox or radio button. The question I wondered, would this be a
cheap-azz way of making a sliding sidebar? And the answer is, yes it
could.&lt;/p&gt;

&lt;p&gt;Over at &lt;a href=&quot;https://codepen.io/tamouse/pen/YQjVNb?editors=1100&quot;&gt;codepen&lt;/a&gt; I left a pen showing just that:&lt;/p&gt;

&lt;iframe height=&quot;265&quot; scrolling=&quot;no&quot; title=&quot;what can you do with :checked?&quot; src=&quot;//codepen.io/tamouse/embed/YQjVNb/?height=265&amp;amp;theme-id=0&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/tamouse/pen/YQjVNb/&quot;&gt;what can you do with :checked?&lt;/a&gt; by Tamara Temple (&lt;a href=&quot;https://codepen.io/tamouse&quot;&gt;@tamouse&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;p&gt;Some of the interesting bits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The body is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-direction: row&lt;/code&gt;, which
would normally put the 3 major body parts, &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aside&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; horizontally, but…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The input checkbox is positioned absolute taking it out of the flex
flow, so only the &lt;code class=&quot;highlighter-rouge&quot;&gt;aside&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; are flexed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After setting everything up for the “normal” state, with the
checkbox &lt;em&gt;un&lt;/em&gt;checked, and the sidebar &lt;em&gt;hidden&lt;/em&gt;, I added the last CSS
rule to display the sidebar when the input checkbox is checked.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;normal-state&quot;&gt;normal state&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;checked-state&quot;&gt;checked state&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.sidebar-toggle&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:checked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this could be taken in all sorts of directions, but I
wanted to try this out to see if it works.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Jul 2017 01:25:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/css/2017/07/06/playing-games-with-the-checked-pseudo-selector/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/css/2017/07/06/playing-games-with-the-checked-pseudo-selector/</guid>
        
        <category>css</category>
        
        <category>checked</category>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>TIL: GraphQL</title>
        <description>&lt;p&gt;Although today was a workday, I spent it in blissful exploration on a
technology we’re going to be using in our application: GraphQL.&lt;/p&gt;

&lt;p&gt;The setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails application, running 4.2.8&lt;/li&gt;
  &lt;li&gt;Webpack 2x, upgraded in existing the &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-rails&lt;/code&gt; environment&lt;/li&gt;
  &lt;li&gt;React client without any sprockets support&lt;/li&gt;
  &lt;li&gt;ApolloClient&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I set up a toy application based on the above constraints,
at &lt;a href=&quot;https://github.com/tamouse/graphql_sample&quot;&gt;graphql_sample&lt;/a&gt; to
practice and dig into learning how GraphQL works.&lt;/p&gt;

&lt;h2 id=&quot;graphql&quot;&gt;GraphQL&lt;/h2&gt;

&lt;p&gt;A little intro, although it’s best to head over to the
main &lt;a href=&quot;https://graphql.org&quot;&gt;GraphQL&lt;/a&gt; website if you want to know more
about it.&lt;/p&gt;

&lt;p&gt;GraphQL is a new sort of query language for APIs that gives your
client applications a very different experience of data than the
familiar RESTful APIs. It’s centered around data objects in a way
that’s both similar to JSON-API, but still quite different form that.&lt;/p&gt;

&lt;p&gt;It’s a descriptive (declarative) language, where you define your
data’s types, fields, functions, queries, and schemas.&lt;/p&gt;

&lt;h3 id=&quot;types&quot;&gt;Types&lt;/h3&gt;

&lt;p&gt;Let’s look at an example. Supposed you had a data model that looked
something like this, from ActiveRecord in Rails:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:published&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;null: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:published_at&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An example of a GraphQL type that describes a post looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;type Post {
  id: ID
  title: String
  body: String
  published: Boolean
  published_at: String
  created_at: String
  updated_at: String
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;queries&quot;&gt;Queries&lt;/h3&gt;

&lt;p&gt;Based on that Post type, you can construct a Query that retrieves posts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;type Query {
  post: Post
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(Indeed, queries are also types.)&lt;/p&gt;

&lt;h3 id=&quot;schema&quot;&gt;Schema&lt;/h3&gt;

&lt;p&gt;The schema is the top level part of the whole bit that brings the data
types and query types together, and forms the API itself.&lt;/p&gt;

&lt;h3 id=&quot;mutations&quot;&gt;Mutations&lt;/h3&gt;

&lt;p&gt;Mutations are the flip-side of queries, where you can create, update,
and remove data, i.e. “mutate” it. I didn’t get that far at all today.&lt;/p&gt;

&lt;h2 id=&quot;apollo-client&quot;&gt;Apollo Client&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.apollodata.com/&quot;&gt;Apollo client&lt;/a&gt; is a client that
implements the GraphQL client-side of the API really well. They have
dev kits for React, Angular, IOS, Android, and even Vanilla JS. Since
my interest right now is in React, I delved into
the &lt;a href=&quot;http://dev.apollodata.com/react/&quot;&gt;Apollo React Client&lt;/a&gt; (Note that
this works with both web and native react.)&lt;/p&gt;

&lt;p&gt;The morning was spent with the first two tutorials, building out the
React Apollo client and an Express GraphQL server. They were great
tutorials, and went smoothly.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev-blog.apollodata.com/full-stack-react-graphql-tutorial-582ac8d24e3b&quot;&gt;Full Stack React + GraphQL Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev-blog.apollodata.com/react-graphql-tutorial-part-2-server-99d0528c7928&quot;&gt;React + GraphQL Tutorial - The Server&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My version, based on the tutorial, is over
at &lt;a href=&quot;https://github.com/tamouse/graphql-tutorial&quot;&gt;graphql-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was enough to get me chomping at the bit to do it in Rails.&lt;/p&gt;

&lt;h2 id=&quot;rails-server&quot;&gt;Rails Server&lt;/h2&gt;

&lt;p&gt;A while back, I did write a pretty simple GraphQL Rails API using both
the &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-ruby&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-api&lt;/code&gt; gems. The latter makes the
implementation pretty easy based on introspecting the apps models, but
I wasn’t quite sure it’s ready for prime-time yet.&lt;/p&gt;

&lt;p&gt;Today, I started over, creating a server app within the constraints
listed above, and added the &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-rails&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql&lt;/code&gt; gems. The
interesting thing is that installing the &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql&lt;/code&gt; in rails loaded up
further gems, including a Graph&lt;em&gt;i&lt;/em&gt;QL interface that let’s you
introspect the API while in development.&lt;/p&gt;

&lt;p&gt;There was a lot of back-and-forth with &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-rails&lt;/code&gt;. In the end, I
probably should have just configured the thing directly with webpack
2x and all the needful.&lt;/p&gt;

&lt;p&gt;I did try going the &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; way at first, and ended up
keeping a lot of it after ejecting the build, but finally relying on
my own understands of webpack configuration and knowing the current
way our application works to be the final arbiters.&lt;/p&gt;

&lt;h2 id=&quot;graphql-ruby&quot;&gt;GraphQL-Ruby&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/rmosolgo/graphql-ruby&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-ruby&lt;/code&gt;&lt;/a&gt; is
pretty interesting, in that it sets up a route for the GraphQL API
directly, &lt;code class=&quot;highlighter-rouge&quot;&gt;/graphql&lt;/code&gt;, which is somewhat of a default / convention. It
mounts the GraphiQL engine on &lt;code class=&quot;highlighter-rouge&quot;&gt;/graphiql&lt;/code&gt; at the same time, which is a
nice way to work, as you can progressively test out your types,
queries, and schemas as you work.&lt;/p&gt;

&lt;p&gt;The gem creates a new folder under &lt;code class=&quot;highlighter-rouge&quot;&gt;app/graphql/&lt;/code&gt; with a default
schema and query type. Types are under the &lt;code class=&quot;highlighter-rouge&quot;&gt;app/graphql/types/&lt;/code&gt;
directory, and so get name-spaced &lt;code class=&quot;highlighter-rouge&quot;&gt;Type::NameType&lt;/code&gt;. The DSL
(domain-specific language) used to define things is quite similar to
the GraphQL syntax, although of course fit to Ruby.&lt;/p&gt;

&lt;p&gt;For example, the default query created looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QueryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GraphQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Query&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Add root-level fields here.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# They will be entry points for queries on your schema.&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# TODO: remove me&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:testField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;An example field added by the generator&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;learning&quot;&gt;Learning&lt;/h2&gt;

&lt;p&gt;Here’s where the real learning and experimenting started. Up to now,
things have been pretty simple and straight-forward.&lt;/p&gt;

&lt;p&gt;I created the Post model described above, populated it with a few
entries.&lt;/p&gt;

&lt;h3 id=&quot;posttype&quot;&gt;PostType&lt;/h3&gt;

&lt;p&gt;I wrote the following as the data type for the Post model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PostType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GraphQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Post&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A short post of content with a title, may be draft or published.&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;internal ID&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;title of the post&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the post content&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:published&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true if the post has been published&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:published_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the date the post was published&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;date the post entry was created&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;date the post entry was last updated&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;querytype&quot;&gt;QueryType&lt;/h3&gt;

&lt;p&gt;Then modified the sample query to produce a query that would find a
post by it’s ID:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QueryType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GraphQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Query&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Add root-level fields here.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# They will be entry points for queries on your schema.&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PostType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;find a post by id&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Without changing anything else, I was able to successfully query the
API to get a post.&lt;/p&gt;

&lt;h3 id=&quot;but-how-do-i-get-multiple-posts&quot;&gt;But, how do I get multiple Posts?&lt;/h3&gt;

&lt;p&gt;Here’s where I spent the last two hours or so of the day, trying to
figure out how this works. Clearly, it’s possible, and I think I have
some ideas to go forward, but I was really stuck at this point.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rmosolgo/graphql-ruby/issues/166&quot;&gt;This&lt;/a&gt; looks like
it might provide some insight when I work on this next.&lt;/p&gt;

&lt;p&gt;The concept is also explored in Jake Trent’s blog
post:
&lt;a href=&quot;https://jaketrent.com/post/return-array-graphql/&quot;&gt;return an array in graphql&lt;/a&gt;
although I’ll still need to translate to &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-ruby&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All-in-all, a productive, happy day learning something completely
new. Frustrations go along with learning; as one of my teachers says
“That banging your head on the desk, that’s called growth” (Hi,
Scott!)&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Jul 2017 22:14:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/webdev/2017/07/03/til-graphql/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/webdev/2017/07/03/til-graphql/</guid>
        
        <category>graphql</category>
        
        <category>apollo-client</category>
        
        <category>rails</category>
        
        <category>react</category>
        
        <category>webpack</category>
        
        
        <category>webdev</category>
        
      </item>
    
      <item>
        <title>Stop Compiling Ruby For Provisioning!</title>
        <description>&lt;p&gt;Stop! Don’t compile that ruby installation!&lt;/p&gt;

&lt;p&gt;Next time you are setting out to provision a box with Ruby on it,
instead of downloading the source and libraries and compiling it, and
waiting for 15 minutes, use the pre-built binaries at
the &lt;a href=&quot;http://www.brightbox.com&quot;&gt;Brightbox&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Ubuntu: &lt;a href=&quot;https://www.brightbox.com/docs/ruby/ubuntu/&quot;&gt;https://www.brightbox.com/docs/ruby/ubuntu/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-a-nutshell&quot;&gt;In a nutshell:&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install build-essential software-properties-common
apt-add-repository ppa:brightbox.com/ruby-ng
apt-get update &amp;amp;&amp;amp; apt-get install ruby2.4 ruby2.4-dev
apt-get install ruby-switch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Jun 2017 21:35:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/devops/2017/06/06/stop-compiling-rubies/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/devops/2017/06/06/stop-compiling-rubies/</guid>
        
        <category>devops</category>
        
        <category>provisioning</category>
        
        <category>brightbox</category>
        
        <category>ruby</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>List of awesome accessibility resources</title>
        <description>&lt;p&gt;Great collection of resources available for implementing accessibility
(a11y) over on github:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brunopulis.com/awesome-a11y/&quot;&gt;List of awesome accessibility resources&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://github.com/brunopulis/aweasome-a11y&quot;&gt;Github repo&lt;/a&gt;)&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 May 2017 23:25:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/a11y/2017/05/14/list-of-awesome-a11y-links/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/a11y/2017/05/14/list-of-awesome-a11y-links/</guid>
        
        <category>ally</category>
        
        <category>links</category>
        
        <category>accessibility</category>
        
        <category>lists</category>
        
        <category>github</category>
        
        
        <category>a11y</category>
        
      </item>
    
      <item>
        <title>Minimum needed for full height with standard header / main / footer</title>
        <description>&lt;p&gt;I figured this out once, but lost it somewhere, so I’m recording here
for sure: How to make a web page attain it’s full height, with a page
header, page footer, and a main content section, so the footer will be
on the bottom if the main content section is not tall enough.&lt;/p&gt;

&lt;p&gt;This was based off
a &lt;a href=&quot;https://css-tricks.com/&quot;&gt;CSS-Tricks&lt;/a&gt;
article
&lt;a href=&quot;http://codepen.io/tamouse/pen/LyrNBB&quot;&gt;Boxes That Fill Height (Or More) (and Don’t Squish)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trying some a bit new, am using an embedded gist:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/tamouse/ed0174615be56bc4309f5dff7537d03a.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;screenshot&quot;&gt;Screenshot&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://monosnap.com/file/Du9EXFqr6RGRBwP2eCM991d1Az1ehZ.png&quot; alt=&quot;Screen Capture&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 May 2017 17:43:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/css/2017/05/14/minimum-needed-for-full-height-with-standard-header-slash-main-slash-footer/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/css/2017/05/14/minimum-needed-for-full-height-with-standard-header-slash-main-slash-footer/</guid>
        
        <category>css-tricks</category>
        
        <category>css</category>
        
        <category>flexbox</category>
        
        <category>full-height</category>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>ScrollStick: a JavaScript module to make scrolling headers sticky</title>
        <description>&lt;p&gt;I like the way sticky headers work on various web sites I’ve
seen. There are some really interesting implementations where the
header changes when it gets to the top of the page, which is fun.  I
wrote up a JS module called &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollSticky&lt;/code&gt; which is out on my GitHub
at &lt;a href=&quot;https://github.com/tamouse/scroll-stick&quot;&gt;https://github.com/tamouse/scroll-stick&lt;/a&gt;.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#things-i-had-to-figure-out&quot; id=&quot;markdown-toc-things-i-had-to-figure-out&quot;&gt;Things I had to figure out.&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cloning-the-header&quot; id=&quot;markdown-toc-cloning-the-header&quot;&gt;cloning the header&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#adding-the-cloned-element-to-the-document&quot; id=&quot;markdown-toc-adding-the-cloned-element-to-the-document&quot;&gt;Adding the cloned element to the document&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#determining-the-headers-offset-in-the-document&quot; id=&quot;markdown-toc-determining-the-headers-offset-in-the-document&quot;&gt;determining the header’s offset in the document&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#performing-the-action-during-scrolling&quot; id=&quot;markdown-toc-performing-the-action-during-scrolling&quot;&gt;performing the action during scrolling&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-display-instead-of-visibility-property&quot; id=&quot;markdown-toc-using-display-instead-of-visibility-property&quot;&gt;using display instead of visibility property&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo&quot; id=&quot;markdown-toc-demo&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a very simple implementation. The other examples I’ve looked
at tend to all use jQuery, which is great, but I wanted one in plain
old JavaScript. It’s not really any harder, but there’s a lot of stuff
that jQuery makes simpler by having the methods defined.&lt;/p&gt;

&lt;h2 id=&quot;things-i-had-to-figure-out&quot;&gt;Things I had to figure out.&lt;/h2&gt;

&lt;h3 id=&quot;cloning-the-header&quot;&gt;cloning the header&lt;/h3&gt;

&lt;p&gt;This was just a little harder than I thought it would be, and required
a lot of playing around to figure out what to do. The result is in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;StickyScroll.cloneTarget&lt;/code&gt; function. Cloning the header was pretty
easy, but then I needed to ensure the clone didn’t have the same &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;
attribute, and needed to acquire some style properties that might not
be on the original. To make to actually stick to the top, the top has
to be set to zero, positioning needed to be fixed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tgt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cloneNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fixed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The cute part, when you set a block element’s position to fixed, it no
longer takes up the same width (the width gets calculated to the
content box). So I &lt;em&gt;also&lt;/em&gt; had to set the width property.&lt;/p&gt;

&lt;p&gt;Figuring out the actual width took some digging and I found the
&lt;code class=&quot;highlighter-rouge&quot;&gt;offsetWidth&lt;/code&gt; property, but to make it actually work for the style, I
needed to specify the measurement, “px”.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;cln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tgt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;adding-the-cloned-element-to-the-document&quot;&gt;Adding the cloned element to the document&lt;/h3&gt;

&lt;p&gt;I wanted the cloned element to come right after the header
element. After a tour through stackoverflow, I found the answer
at
&lt;a href=&quot;http://stackoverflow.com/questions/7258185/javascript-append-child-after-element#7258301&quot;&gt;http://stackoverflow.com/questions/7258185/javascript-append-child-after-element#7258301&lt;/a&gt;
which gave me the nice one-liner:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;      &lt;span class=&quot;nx&quot;&gt;tgt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tgt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextSibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I made
a &lt;a href=&quot;https://jsfiddle.net/tamouse/m74nx2e5/&quot;&gt;jsfiddle to try it out&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;determining-the-headers-offset-in-the-document&quot;&gt;determining the header’s offset in the document&lt;/h3&gt;

&lt;p&gt;In jQuery, there’s a nice &lt;code class=&quot;highlighter-rouge&quot;&gt;.offset&lt;/code&gt; function that gives this, but in
POJS, you have to do a bit more. The
MDN
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect&quot;&gt;explains how to do this&lt;/a&gt;,
but doesn’t offer code. The resulting code ended up easier than I
thought it would be. (Answers from SO were varying.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;performing-the-action-during-scrolling&quot;&gt;performing the action during scrolling&lt;/h3&gt;

&lt;p&gt;I had to play around a lot with this to get it right. I’m not sure all
the different things I tried, but eventually figured it out.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromTop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stickyEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stickyEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;using-display-instead-of-visibility-property&quot;&gt;using display instead of visibility property&lt;/h3&gt;

&lt;p&gt;One thing I did not figure out, the jQuery versions used the
&lt;code class=&quot;highlighter-rouge&quot;&gt;visibility&lt;/code&gt; CSS property for the sticky header, but what I found
happening was the the “roll-under” fix I put it the CSS was not
working as I’d want. The invisible sticky header clone would push the
anchored element down too far. I ended up switching to use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;display&lt;/code&gt; property instead.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Here’s the demo page:&lt;/p&gt;

&lt;iframe src=&quot;https://tamouse.github.io/scroll-stick/&quot; width=&quot;100%&quot; height=&quot;300px&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 14 May 2017 01:37:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/javascript/2017/05/14/scrollstick-a-javascript-module-to-make-scrolling-headers-sticky/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/javascript/2017/05/14/scrollstick-a-javascript-module-to-make-scrolling-headers-sticky/</guid>
        
        <category>scripts</category>
        
        <category>javascript</category>
        
        <category>sticky-headers</category>
        
        <category>persistent-headers</category>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
<!-- touch 1 -->

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software as a Craft</title>
    <description>The development blog of tamouse</description>
    <link>https://tamouse.github.io//swaac/</link>
    <atom:link href="https://tamouse.github.io//swaac/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 11 Jul 2018 07:44:33 -0500</pubDate>
    <lastBuildDate>Wed, 11 Jul 2018 07:44:33 -0500</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>FrontendMasters: JavaScript: The Hard Parts, Will Sentance</title>
        <description>&lt;p&gt;Recently watching &lt;a href=&quot;https://frontendmasters.com/courses/javascript-hard-parts/&quot;&gt;this video&lt;/a&gt; with a study group,
and working through a few of the coding challenges.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#callbacks-and-higher-order-functions&quot; id=&quot;markdown-toc-callbacks-and-higher-order-functions&quot;&gt;Callbacks and Higher-Order Functions&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#warm-ups&quot; id=&quot;markdown-toc-warm-ups&quot;&gt;Warm ups&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#map&quot; id=&quot;markdown-toc-map&quot;&gt;map&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#foreach&quot; id=&quot;markdown-toc-foreach&quot;&gt;forEach&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mapwith&quot; id=&quot;markdown-toc-mapwith&quot;&gt;mapWith&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#to-be-continued&quot; id=&quot;markdown-toc-to-be-continued&quot;&gt;(To be continued)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;callbacks-and-higher-order-functions&quot;&gt;Callbacks and Higher-Order Functions&lt;/h2&gt;

&lt;p&gt;The reference link for this section is
&lt;a href=&quot;https://csbin.io/callbacks&quot; title=&quot;online editing
sandbox&quot;&gt;csbin.io/callbacks&lt;/a&gt; where the examples and instructions are given. I’m not going
to repeat all that here, but I’m going to track here my own
work in developing the answers, and my own thoughts and notes.&lt;/p&gt;

&lt;p&gt;The first handful of challenges weren’t for me, to the point I didn’t
have to think how these would be implemented. For someone new to this,
though, the can be quite challenging, and we had some good discussion
amongst my study buddies.&lt;/p&gt;

&lt;h3 id=&quot;warm-ups&quot;&gt;Warm ups&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;map&quot;&gt;map&lt;/h3&gt;

&lt;p&gt;Map returns a new array, where each item is the result of running the callback on each element of the orginal array&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Declare and initialize the return array.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Need some place to put our work&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Using a standard for loop to process each element of the array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// assigning the current element of the array here, although not necessary,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// illustrates the point that the rest of the body of the for loop *after*&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// this point is acting on the current element.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The current item of the original array gets passed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to the callback function, and the result is added&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to the end of the new array&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The result of the map is the new array with the processed elements&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s check it: pass in an array of integers, and a function to add 2 to each element&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; [ 3, 4, 5, 6 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the declaration and assignment of the current array item to the intermediate variable &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop. This is not necesary by any means, but I put it in to illustrate the distinction between the item, and what’s acting on the item. This might become more useful in understanding when we begin to use &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;mapWith&lt;/code&gt; and others below.&lt;/p&gt;

&lt;h3 id=&quot;foreach&quot;&gt;forEach&lt;/h3&gt;

&lt;p&gt;The standard for loop used above in the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; function is great and all, and I’ll be using it again here implementing this &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; function. The &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; function will then become the building block for the next set of of functions.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; function is an &lt;em&gt;impure&lt;/em&gt; function, returning nothing and only performing side-effects for each element of the array.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to hold the current item&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// act on the current item&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Check the forEach&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// can pass in functions!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This also illustrates the fact we can pass functions and methods as regular parameters. This is the building block of functional programming.&lt;/p&gt;

&lt;p&gt;The callback function &lt;code class=&quot;highlighter-rouge&quot;&gt;cb&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; function has a particular signature:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... do something with item&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someResult&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// may be optional&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is passed the current element of the array in the &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; parameter, and performs some action upon it. The callback may return a value, but it doesn’t necessarily have to. The next subsection requires the callback to return a value, so it’s is highly dependent on the specific use. Sometimes the only thing that you may want to have happen to the array elements is run a side effect, perhaps if your array is a set of hooks or other callback functions.&lt;/p&gt;

&lt;p&gt;To illustrate the latter, suppose the array was a collection of line items on an order, and you wanted to calculate the line price based on the unit price and quantity of items. Since each line item is a self-contained object, updating that line price is a side-effect on that object, instead of creating new objects. This might be how it could be written:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calcLineCosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lineItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lineItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lineItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;lineItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;linePrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lineItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lineItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unitPrice&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;mapwith&quot;&gt;mapWith&lt;/h3&gt;

&lt;p&gt;Reimplement &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; from above, this time using our &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; method. This was a head-scratcher for some of the study buddies, so I’ll walk through it a little more slowly.&lt;/p&gt;

&lt;p&gt;The main structure will still be the same:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;declare and initialize a space to build the new array&lt;/li&gt;
  &lt;li&gt;inside the “loop” (which is implemented by the &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;), I’ll push the result of the callback on the array item onto the new array variable&lt;/li&gt;
  &lt;li&gt;return the new array&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// step 1&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// forEach providing our loop&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// step 2&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// step 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key is to figure out how to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; call. The parameters to &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;arr&lt;/code&gt; - the input array, and &lt;code class=&quot;highlighter-rouge&quot;&gt;cb&lt;/code&gt; the function to run on each. So inside, I need to create a function that will perform the &lt;code class=&quot;highlighter-rouge&quot;&gt;mapped.push&lt;/code&gt; call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The anonymous function in the &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; call takes in the current array item and performs the push onto the new array after calling the callback on the item. Here is the entire contstruction, redone with ES6 syntax for the anonymous function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works with &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;’s side-effect-only behaviour because &lt;code class=&quot;highlighter-rouge&quot;&gt;mapped&lt;/code&gt; is declared outside the &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; call. It is still &lt;em&gt;within&lt;/em&gt; the scope of &lt;code class=&quot;highlighter-rouge&quot;&gt;mapWith&lt;/code&gt;, however, so it won’t leak anything, and &lt;code class=&quot;highlighter-rouge&quot;&gt;mapWith&lt;/code&gt; is itself a &lt;strong&gt;pure function&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; function body for &lt;code class=&quot;highlighter-rouge&quot;&gt;mapWith&lt;/code&gt; is the same as the original &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; function, from &lt;em&gt;after&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; declaration.&lt;/p&gt;

&lt;p&gt;The result is the same as for &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mapWith: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; mapWith:  [ 3, 4, 5, 6 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Continuing the discussion about whether our callbacks should return a value, in the case of the &lt;code class=&quot;highlighter-rouge&quot;&gt;mapWith&lt;/code&gt; (or even &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;) functions, the callback &lt;strong&gt;must&lt;/strong&gt; return a value, otherwise the new array will contain a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;’s instead.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;(To be continued)&lt;/h2&gt;

&lt;p&gt;As the study group gets further, I’ll add more to this post.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jul 2018 05:35:00 -0500</pubDate>
        <link>https://tamouse.github.io//swaac/javascript/2018/07/11/FeM-JS-The-Hard-Parts/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/javascript/2018/07/11/FeM-JS-The-Hard-Parts/</guid>
        
        <category>javascript</category>
        
        <category>class</category>
        
        <category>notes</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>TIL: Removing all Docker Containers and Images</title>
        <description>&lt;p&gt;I needed to do a reset on my work machine of the Docker stuff I was
using, so needed to know how to do this.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-aq&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -aq&lt;/code&gt; gives a list of all the container hashes, which is
given the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Similarly, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images -q&lt;/code&gt; lists all the docker image hashes, which
is given to docker’s “remove images” &lt;code class=&quot;highlighter-rouge&quot;&gt;rmi&lt;/code&gt; command.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jun 2018 11:51:00 -0500</pubDate>
        <link>https://tamouse.github.io//swaac/docker/2018/06/04/til-remove-all-docker-containers-and-images/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/docker/2018/06/04/til-remove-all-docker-containers-and-images/</guid>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>images</category>
        
        <category>removing</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Removing entries from an object</title>
        <description>&lt;p&gt;I was casting about for a simple way to remove specific keys from an
object before returning it to a consumer function. In this particular
case, I wanted to remove all the entries that began with an underscore
(&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;_&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;There’s nothing like Ruby’s Hash Enumerbles, but there is a library of
such functions for JavaScript, &lt;a href=&quot;https://lodash.com&quot;&gt;lodash&lt;/a&gt; that fills
in rather well.&lt;/p&gt;

&lt;p&gt;For this exercise, I used the
&lt;a href=&quot;https://lodash.com/docs/4.17.10#reduce&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;&lt;/a&gt; function in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Collections&lt;/code&gt; set of functions.&lt;/p&gt;

&lt;h2 id=&quot;reduce-syntax&quot;&gt;reduce syntax&lt;/h2&gt;

&lt;p&gt;The syntax for lodash’s &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result = _.reduce(collection, filter, initialValue)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-filter&quot;&gt;the filter&lt;/h2&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; function, you need to provide it with an &lt;code class=&quot;highlighter-rouge&quot;&gt;iteratee&lt;/code&gt; –
something that acts on the current thing in the collection and returns
the updated accumulator.&lt;/p&gt;

&lt;p&gt;The function signature for the filter (iteratee) is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function filter(accumulator, value, key, collection)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the collection is an &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, the key is the current key. If the
collection is an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, it’s the current index.&lt;/p&gt;

&lt;p&gt;In my case, I want to dump all keys that start with underscore, so the
filter function is:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;putting it all together&lt;/h2&gt;

&lt;p&gt;In a simple example, I have &lt;code class=&quot;highlighter-rouge&quot;&gt;obj1&lt;/code&gt; that has a bad key: &lt;code class=&quot;highlighter-rouge&quot;&gt;_bad&lt;/code&gt; that I
want removed:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;_bad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;good&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The end result in &lt;code class=&quot;highlighter-rouge&quot;&gt;obj2&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ good: 2 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is just what I wanted.&lt;/p&gt;

&lt;p&gt;There’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;jsfiddle&lt;/code&gt; at &lt;a href=&quot;https://jsfiddle.net/tamouse/5f3L5dbz/&quot;&gt;https://jsfiddle.net/tamouse/5f3L5dbz/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 15 May 2018 00:38:00 -0500</pubDate>
        <link>https://tamouse.github.io//swaac/javascript/2018/05/15/removing-entries-from-an-object/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/javascript/2018/05/15/removing-entries-from-an-object/</guid>
        
        <category>javascript</category>
        
        <category>lodash</category>
        
        <category>reduce</category>
        
        <category>snippets</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>TIL: Setting input value in React determines controlled vs uncontrolled </title>
        <description>&lt;p&gt;Setting the input value on a React input element ultimately determines
whether it’s a controlled or uncontrolled element.&lt;/p&gt;

&lt;p&gt;There’s isn’t much guidance on this, but this is what I’ve learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;to make an input value &lt;em&gt;controlled&lt;/em&gt;, set the value to a string. To
initialize it with “No Value” set it to the empty string: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;leaving the input value &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; makes the element &lt;em&gt;uncontrolled&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if the input value is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, then React complains that it can’t
tell whether it should be controlled or not, and tells you to set it
to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Beware&lt;/strong&gt; when you input values come from someplace else.&lt;/p&gt;

&lt;p&gt;Note that this works fine when Rails is your backend, usually.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 May 2018 00:00:00 -0500</pubDate>
        <link>https://tamouse.github.io//swaac/react/2018/05/04/til-setting-input-value-in-react-controlled-vs-uncontrolled/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/react/2018/05/04/til-setting-input-value-in-react-controlled-vs-uncontrolled/</guid>
        
        <category>react</category>
        
        <category>controlled</category>
        
        <category>uncontrolled</category>
        
        <category>input</category>
        
        <category>value</category>
        
        
        <category>react</category>
        
      </item>
    
      <item>
        <title>TIL: Don't use vendor subdirectory on Heroku</title>
        <description>&lt;p&gt;I was helping a friend tonight with a problem they were having getting
a tiny web app to run on heroku.&lt;/p&gt;

&lt;p&gt;I spent quite some time trying to figure out the issue.&lt;/p&gt;

&lt;p&gt;It turns out that &lt;code class=&quot;highlighter-rouge&quot;&gt;Heroku&lt;/code&gt; reserves the &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/&lt;/code&gt; folder for it’s own
use, so you can’t delivery files from it. (This is true for PHP
applications, at least. We didn’t investigate further).&lt;/p&gt;

&lt;p&gt;So, simple rule, don’t use the &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/&lt;/code&gt; directory in your own app.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Apr 2018 21:40:00 -0500</pubDate>
        <link>https://tamouse.github.io//swaac/webdev/2018/04/17/til-dont-use-vendor-subdirectory-on-heroku/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/webdev/2018/04/17/til-dont-use-vendor-subdirectory-on-heroku/</guid>
        
        <category>heroku</category>
        
        
        <category>webdev</category>
        
      </item>
    
      <item>
        <title>TIL: React Error boundary workarounds</title>
        <description>&lt;p&gt;Recently I was working on a next-gen standalone react client for my
work, and I decided I wanted to put in error boundaries, which were
introduced in React v16. From the &lt;a href=&quot;&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error boundaries are React components that catch JavaScript errors
anywhere in their child component tree, log those errors, and
display a fallback UI instead of the component tree that
crashed. Error boundaries catch errors during rendering, in
lifecycle methods, and in constructors of the whole tree below them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is well and good, but the first thing I ran into was how to catch
errors that happen outside of the space React’s error boundaries work
in. The following aren’t caught by &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidCatch&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Event handlers&lt;/li&gt;
  &lt;li&gt;Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)&lt;/li&gt;
  &lt;li&gt;Server side rendering&lt;/li&gt;
  &lt;li&gt;Errors thrown in the error boundary itself (rather than its
children)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The particular problem I was working on was catching login errors,
which were returned as a promise rejection. Since the error boundary
didn’t handle this, i searched for help on this, and got it in the
React.MN slack.&lt;/p&gt;

&lt;p&gt;After thinking about it, it does make sense, since React is
declarative, this pretty much has to be handled as some form of
state. The key is, what to do?&lt;/p&gt;

&lt;p&gt;I took a page out of some previous work where I was doing a
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Redirect/&amp;gt;&lt;/code&gt; when a state entry became &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; , so I did it again for
this. I’d catch the rejected promise in the handler, and set a state
variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;logon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// do logon stuff when it works&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hasError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now there’s a state variable &lt;code class=&quot;highlighter-rouge&quot;&gt;hasError&lt;/code&gt; that’s true, and the actual
error in state. Down in the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// go on with no error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This does the bubble-up necessary for the error boundary to catch it.&lt;/p&gt;

&lt;p&gt;Here’s a codepen:&lt;/p&gt;

&lt;p data-height=&quot;735&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;ZxxdGO&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;tamouse&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;ErrorBoundary Example&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/tamouse/pen/ZxxdGO/&quot;&gt;ErrorBoundary
Example&lt;/a&gt; by Tamara Temple (&lt;a href=&quot;https://codepen.io/tamouse&quot;&gt;@tamouse&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It turns out I didn’t use this to handle login errors, but it was a
useful excursion and learning experience anyway.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://tamouse.github.io//swaac/2018/03/30/til-react-error-boundary-workarounds/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/2018/03/30/til-react-error-boundary-workarounds/</guid>
        
        <category>react</category>
        
        <category>errors</category>
        
        <category>error-handling</category>
        
        <category>error-boundaries</category>
        
        <category>componentDidCatch</category>
        
        
      </item>
    
      <item>
        <title>Github Tricks: Turn off White Space Diffs</title>
        <description>&lt;p&gt;Fighting your way through a code review with a lot of changes simply
due to white space changes?&lt;/p&gt;

&lt;p&gt;Github to the rescue!&lt;/p&gt;

&lt;p&gt;Append &lt;code class=&quot;highlighter-rouge&quot;&gt;?w=1&lt;/code&gt; to the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.../files&lt;/code&gt; url to view the diff
&lt;em&gt;without&lt;/em&gt; white space changes.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 10:51:00 -0600</pubDate>
        <link>https://tamouse.github.io//swaac/github/2018/03/01/github-tricks-turn-off-white-space-diffs/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/github/2018/03/01/github-tricks-turn-off-white-space-diffs/</guid>
        
        <category>github</category>
        
        <category>tricks</category>
        
        <category>whitespace</category>
        
        <category>pull-requests</category>
        
        <category>code-reviews</category>
        
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Git Merge &quot;dry run&quot;</title>
        <description>&lt;p&gt;There’s no specific thing called a “dry run merge” with git, but it’s
simple enough to simulate.&lt;/p&gt;

&lt;p&gt;In the sample below, &lt;code class=&quot;highlighter-rouge&quot;&gt;BRANCH&lt;/code&gt; is being merged &lt;strong&gt;into&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout &lt;span class=&quot;nv&quot;&gt;$TARGET&lt;/span&gt;
git merge &lt;span class=&quot;nt&quot;&gt;--no-commit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BRANCH&lt;/span&gt;
git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt;
git merge &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can look for any potential merge conflicts after the first command
as well and see what you might be up against.&lt;/p&gt;

&lt;p&gt;Note you need &lt;em&gt;both&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-commit&lt;/code&gt; &lt;em&gt;AND&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;--no-ff&lt;/code&gt; flags to
prevent the merge from occurring if it’s possible for a fast-forward
merge to occur (likely).&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Feb 2018 10:30:00 -0600</pubDate>
        <link>https://tamouse.github.io//swaac/git/2018/02/28/git-merge-dry-run/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/git/2018/02/28/git-merge-dry-run/</guid>
        
        <category>git</category>
        
        <category>merge</category>
        
        <category>dry-run</category>
        
        <category>tools</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Passing the Time between Rails and React.js</title>
        <description>&lt;p&gt;One of the problems I’ve encountered with a recent project is
maintaining the integrity of Time and Date information going back and
forth between a Rails server and a React client.&lt;/p&gt;

&lt;p&gt;While the issue isn’t necessarily specific to React, it affects any
sort of JavaScript client using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot; title=&quot;JavaScript Date Built-in Object on MDN&quot;&gt;JavaScript’s Date&lt;/a&gt; object.&lt;/p&gt;

&lt;p&gt;The source of my frustration with this particular project is that the
dates in the client are passed around in various different formats,
and there is a lot of reformatting of the dates happening.&lt;/p&gt;

&lt;p&gt;One of my sort of tenants of programming is to never format a date
or time (or datetime, if you will) until it’s necessary to display it
to the user. (This applies in general, but a lot for times.)&lt;/p&gt;

&lt;p&gt;On the Rails side, as on most Unix-based systems, times are objects
with an underlying float value with the integer part being the number
of seconds since the Unix Epoc, 1970-01-01 at midnight UTC. (Often
times one can see dates such as Dec 31, 1969 show up because of
timezone conversions to North America. No, in fact, zero time is &lt;em&gt;not&lt;/em&gt; on
Wednesday everywhere.)&lt;/p&gt;

&lt;p&gt;Rails has the ability to translate time in and out of storage quite
well, but it’s sometimes tricky.&lt;/p&gt;

&lt;p&gt;JavaScript has the ability create and parse dates and times, but it’s
lousy at formatting nice date, which brings in the &lt;code class=&quot;highlighter-rouge&quot;&gt;moment&lt;/code&gt; library
which is quite popular.&lt;/p&gt;

&lt;p&gt;What I’m talking about here, though, is the passing of time
information back and forth between a Rails server and the JavaScript
client.&lt;/p&gt;

&lt;p&gt;Most of the time, when you serialize a Rails record, the time
information is converted to a string, with the default format that
looks like: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Wed, 28 Feb 2018 17:59:28 UTC +00:00&quot;&lt;/code&gt; (the output of
&lt;code class=&quot;highlighter-rouge&quot;&gt;.to_s&lt;/code&gt;). In nearly every case, that’s not a very useful value to be
passing to other programs, which is why I’m converting it to
JSON, presumably.&lt;/p&gt;

&lt;p&gt;So, the better conversion, to avoid all confusion about timezones,
time formats, etc., is to convert it to milliseconds, both going out
and coming back, and convert accordingly, e.g.:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(object.created_at.to_f * 1000).to_i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In GraphQL-land, this would be the &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt; on the &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; entry for
a &lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;field :created_at_ms, &quot;Time of creation in milliseconds&quot; do
  resolve -&amp;gt;(object, _args, _context) { (object.created_at.to_f * 1000).to_i }
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or create a resolver class:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeFieldMilliseconds&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;public_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And declare the field as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;field :created_at_ms, &quot;Time of creation in milliseconds&quot; { resolve TimeFieldMillisecond.new(:created_at) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the client side, convert the milliseconds to a Date object as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let createdAt = new Date(object.created_at_ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or when using moment:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let createdAt = moment(object.created_at_ms)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 18:39:00 -0600</pubDate>
        <link>https://tamouse.github.io//swaac/webdev/2018/02/15/passing-the-time-between-rails-and-react-dot-js/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/webdev/2018/02/15/passing-the-time-between-rails-and-react-dot-js/</guid>
        
        <category>time-formats</category>
        
        <category>rails</category>
        
        <category>react</category>
        
        <category>data-interchange</category>
        
        
        <category>webdev</category>
        
      </item>
    
      <item>
        <title>How to reset iOS simulator</title>
        <description>&lt;p&gt;I ran into an issue recently where I was trying to debug a problem in
a project, but had a problem accessing the right data server since I
was logged into a local development server, and really needed to get
back to the “new app” state.&lt;/p&gt;

&lt;p&gt;I searched for “reset xcode simulator” via DDG and first hit came up
with &lt;a href=&quot;https://stackoverflow.com/questions/16195859/reset-ios-simulator-application-data-to-run-app-for-first-time#16195931&quot;&gt;https://stackoverflow.com/questions/16195859/reset-ios-simulator-application-data-to-run-app-for-first-time#16195931&lt;/a&gt; which gave me an answer.&lt;/p&gt;

&lt;p&gt;The command line versions work, but it can be a pain to get the UDID
for the simulator. Doing it from the running simulator was easier, but
of course the menu options are different than discussed in the
stackoverflow answer.&lt;/p&gt;

&lt;p&gt;I found it on the Simulator
(Version 10.0 (SimulatorApp-835.2.1) seen in the following screen
shot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/swaac/images/reset-ios-simulator.png&quot; alt=&quot;Reset IOS Simulator Screenshot&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 16:07:00 -0600</pubDate>
        <link>https://tamouse.github.io//swaac/ios/2018/02/15/how-to-reset-ios-simulator/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/ios/2018/02/15/how-to-reset-ios-simulator/</guid>
        
        <category>ios</category>
        
        <category>simulator</category>
        
        <category>development</category>
        
        <category>reset</category>
        
        
        <category>ios</category>
        
      </item>
    
  </channel>
</rss>
<!-- touch 1 -->

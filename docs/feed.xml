<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software as a Craft</title>
    <description>The development blog of tamouse</description>
    <link>https://tamouse.github.io//swaac/</link>
    <atom:link href="https://tamouse.github.io//swaac/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 10 Feb 2018 20:19:39 -0800</pubDate>
    <lastBuildDate>Sat, 10 Feb 2018 20:19:39 -0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Polyfills for find() and findIndex() in JavaScript</title>
        <description>&lt;p&gt;The JavaScript &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;findIndez()&lt;/code&gt; methods are
available on all browsers now &lt;strong&gt;except&lt;/strong&gt; IE9. Interestingly, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; methods &lt;em&gt;are&lt;/em&gt; in IE9.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On this page;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-starting-point&quot; id=&quot;markdown-toc-the-starting-point&quot;&gt;the starting point&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-find&quot; id=&quot;markdown-toc-using-find&quot;&gt;using find&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-foreach&quot; id=&quot;markdown-toc-using-foreach&quot;&gt;using forEach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enter-the-functional-programming&quot; id=&quot;markdown-toc-enter-the-functional-programming&quot;&gt;enter the functional programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#discussion&quot; id=&quot;markdown-toc-discussion&quot;&gt;discussion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#so-what&quot; id=&quot;markdown-toc-so-what&quot;&gt;so what?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-starting-point&quot;&gt;the starting point&lt;/h2&gt;

&lt;p&gt;The impetus for this little post is recently seeing a passage of code
like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;activateTab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code, as written, will return the index for the &lt;em&gt;last&lt;/em&gt;
match. Since I’m refactoring, I’m not going to change that
behavior.&lt;/p&gt;

&lt;p&gt;There are a few things wrong with this, IMHO:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;activeTab&lt;/code&gt; variable is never used&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;filter()&lt;/code&gt; method is being used to perform a side effect&lt;/li&gt;
  &lt;li&gt;setting several intermediate variables&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;using-find&quot;&gt;using find&lt;/h2&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;findIndex()&lt;/code&gt;  were available everywhere, I could write
this as:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stateInddex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Except that finds the &lt;em&gt;first&lt;/em&gt; match, not the last, so I couldn’t
really use them anyway.&lt;/p&gt;

&lt;h2 id=&quot;using-foreach&quot;&gt;using forEach&lt;/h2&gt;

&lt;p&gt;But since IE9 doesn’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;find()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;findIndex()&lt;/code&gt;, I’m going write
it with &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach()&lt;/code&gt;, which is &lt;em&gt;intended&lt;/em&gt; for looping &lt;em&gt;with&lt;/em&gt; side
effects:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also got rid of the &lt;code class=&quot;highlighter-rouge&quot;&gt;routes&lt;/code&gt; intermediate variable.&lt;/p&gt;

&lt;p&gt;This is okay and I could leave it there, except it’s still using
intermediate variables.&lt;/p&gt;

&lt;h2 id=&quot;enter-the-functional-programming&quot;&gt;enter the functional programming&lt;/h2&gt;

&lt;p&gt;Writing it with &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; to get rid of the intermediate variables:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;discussion&quot;&gt;discussion&lt;/h2&gt;

&lt;p&gt;Let’s walk through what’s going on with the &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Syntax&quot;&gt;Array’s &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; function&lt;/a&gt;
takes two arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt; - a function that is passed 4 arguments:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt; - collects the value returned from each iteration&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;currentValue&lt;/code&gt; - holds the current value of the array for this
iteration&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; - the index of the current value of the array (indexed by
0)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; - the original array being reduced&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;initialValue&lt;/code&gt; - the initial value given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt;. If
omitted or “undefined” the first element of the array is used.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The callback function in our code is returning the result from the
ternary expression:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cur.routeName === action.routeName ? idx : acc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first part of the ternary evaluates whether the route names from
the current route (&lt;code class=&quot;highlighter-rouge&quot;&gt;cur&lt;/code&gt;) and the one passed in with &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; are the
same.&lt;/p&gt;

&lt;p&gt;If so, the function returns the current index in the array. Otherwise,
it returns the current accumulator.&lt;/p&gt;

&lt;p&gt;When the reduce begines, the accumulator is set to the &lt;code class=&quot;highlighter-rouge&quot;&gt;initialValue&lt;/code&gt;,
which in this case is the index from the current state, which is
handled outside this bit of code.&lt;/p&gt;

&lt;p&gt;As the reducer rolls through the array, if the ternary comes true, the
accumulator will get the value of the index at that point.&lt;/p&gt;

&lt;p&gt;If the reducer goes all through the array and the ternary never comes true, the
final accumulator value will still be the same as when set initially.&lt;/p&gt;

&lt;h2 id=&quot;so-what&quot;&gt;so what?&lt;/h2&gt;

&lt;p&gt;When I was first learning programming, and even now that I’m more
experienced, but don’t necessarily know exactly what I need to do to
implement a passage of code, using &lt;em&gt;intermediate variables&lt;/em&gt; can be
very helpful in understanding and debugging my code.&lt;/p&gt;

&lt;p&gt;There are some passages of code that are more idiomatic and
repetitious, and these are things I practice on and reduce the
amount of code.&lt;/p&gt;

&lt;p&gt;Arrays in particular are high-value targets for practicing on reducing
the number of intermediate variables and beginning to use functional
programming techniques.&lt;/p&gt;

&lt;p&gt;There was nothing wrong with the original code: it did what it’s
supposed to do, it’s not that difficult to see what’s going
on. However, because it uses a method not intended for performing side
effects, it can open up the possibility for injecting an error during
maintenance or enhancemnt.&lt;/p&gt;

&lt;p&gt;Having the unused variable creates confusion for later maintainers as
well, since we’re left with a question about whether it should be
there, and some intended functionality went missing.&lt;/p&gt;

&lt;p&gt;The reducer may look complicated at first, but that’s primarily due to
unfamiliarity. Starting to learn bits of functional programming can
improve the understandability of code for yourself.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Feb 2018 00:00:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/javascript/2018/02/10/polyfills-for-find-and-findIndex/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/javascript/2018/02/10/polyfills-for-find-and-findIndex/</guid>
        
        <category>javascript</category>
        
        <category>polyfills</category>
        
        <category>find</category>
        
        <category>findIndex</category>
        
        <category>missing-ie9</category>
        
        <category>reduce</category>
        
        <category>functional-programming</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>TIL: Some Jest testing tricks</title>
        <description>&lt;p&gt;Deeper learning after much pondering and RTFM for Jest&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#til-using-beforeall-and-beforeeach-in-jest-tests&quot; id=&quot;markdown-toc-til-using-beforeall-and-beforeeach-in-jest-tests&quot;&gt;TIL: using beforeAll and beforeEach in jest tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#til-you-can-call-instance-variables-and-functions-on-an-enzyme-wrapper&quot; id=&quot;markdown-toc-til-you-can-call-instance-variables-and-functions-on-an-enzyme-wrapper&quot;&gt;TIL: you can call instance variables and functions on an Enzyme wrapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;til-using-beforeall-and-beforeeach-in-jest-tests&quot;&gt;TIL: using beforeAll and beforeEach in jest tests&lt;/h2&gt;

&lt;p&gt;This has been bugging me for awhile. I have wanted to set up things
in &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeAll&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach&lt;/code&gt; functions, like I do in RSpec, but
couldn’t quite figure out how to get them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; calls.&lt;/p&gt;

&lt;p&gt;Turns out to be stupid simple. All you need to do is set the items
on the &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; context, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;beforeAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TagsInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;na&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;na&quot;&gt;item_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;na&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;noop&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the suite finishes, clear out the item:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;afterAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TagsInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I suppose that pollutes the global space, so one might want to do
it in a namespace, and then clear that every time, too:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;til-you-can-call-instance-variables-and-functions-on-an-enzyme-wrapper&quot;&gt;TIL: you can call instance variables and functions on an Enzyme wrapper&lt;/h1&gt;

&lt;p&gt;Okay, this is very cool. I didn’t know this would work BUT IT DOES!&lt;/p&gt;

&lt;p&gt;This involves a few different things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;calling a method on a mounted instance of a component&lt;/li&gt;
  &lt;li&gt;putting an expect on a callback&lt;/li&gt;
  &lt;li&gt;interogating a mounted component’s state&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;can i call stuff directly?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;boo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;boo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 19 Jan 2018 22:12:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/testing/2018/01/19/til-some-jest-testing-tricks/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/testing/2018/01/19/til-some-jest-testing-tricks/</guid>
        
        <category>jest</category>
        
        <category>testing</category>
        
        <category>react</category>
        
        <category>instance</category>
        
        <category>beforeEach</category>
        
        <category>beforeAll</category>
        
        <category>setup-teardown</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Side-by-side layout with CSS Grid</title>
        <description>&lt;p&gt;In my continuing search for my “best” web site layout, I’ve come down
pretty strongly on the side-by-side “dashboard” style, where there
aren’t page headers or footers. The reasons I’m not particularly
liking page headers and footers has to do with the way I tend to
scroll through sites, but pressing the spacebar. This tends to make
the content scroll underneath the fixed headers, and I have to back up
using the up arrow. It’s a pain with so many other websites,
especially when they interpret using the up arrow as “The User must
want more options in the header! Let’s make it BIGGER” which means I
have to up arrow even more.&lt;/p&gt;

&lt;p&gt;So.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-grid-side-by-side-layout-with-100-stretch&quot;&gt;Creating a Grid side-by-side layout with 100% stretch&lt;/h2&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;https://codepen.io/tamouse/pen/KyEPPG&quot; title=&quot;see on codepen.io&quot;&gt;Codepen.IO Pen&lt;/a&gt; that
creates that layout using CSS Grid.&lt;/p&gt;

&lt;p data-height=&quot;597&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;KyEPPG&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;tamouse&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;side-by-side dashboard layout using grid&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/tamouse/pen/KyEPPG/&quot;&gt;side-by-side dashboard layout using grid&lt;/a&gt; by Tamara Temple (&lt;a href=&quot;https://codepen.io/tamouse&quot;&gt;@tamouse&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;the-important-thing-to-remember-about-this&quot;&gt;The important thing to remember about this:&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I want an inner block to stretch to the full height of the
window, I must set that inner block element, &lt;strong&gt;and all wrapping
block elements&lt;/strong&gt; height to 100%.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;making-this-work-on-a-react-app&quot;&gt;Making this work on a React app&lt;/h2&gt;

&lt;p&gt;In a typical React app, I have 4 levels that need to be set to
100%:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;html&lt;/li&gt;
  &lt;li&gt;body&lt;/li&gt;
  &lt;li&gt;app component&lt;/li&gt;
  &lt;li&gt;the div inside the app component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The canonical react app, as &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; defines it, looks like
so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; .... &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;React app loading...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the react app loads, it looks like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; .... &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react__app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;... &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(Just off the top of my head, I’m unsure what the react app’s &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; looks
like exactly, but I’m sure it &lt;em&gt;is&lt;/em&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; element so the below will work.)&lt;/p&gt;

&lt;p&gt;So I use this as my basic CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to get the react app to fill the full window height like I want it.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Dec 2017 21:58:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/css/2017/12/03/side-by-side-layout-with-css-grid/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/css/2017/12/03/side-by-side-layout-with-css-grid/</guid>
        
        <category>css</category>
        
        <category>grid</category>
        
        <category>layout</category>
        
        <category>webdesign</category>
        
        <category>react</category>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>TIL: emacs toggle-debug-on-exit</title>
        <description>&lt;p&gt;Today, I learned there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle-debug-on-exit&lt;/code&gt; emacs function.&lt;/p&gt;

&lt;p&gt;To use it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;M-x toggle-debug-on-exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then reproduce the problem when trying to exit emacs, and use the
debugger / study the backtrace.&lt;/p&gt;

&lt;p&gt;H/T &lt;code class=&quot;highlighter-rouge&quot;&gt;#emacs&lt;/code&gt; channel on Freenode.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Dec 2017 21:54:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/emacs/2017/12/03/til-emacs-toggle-debug-on-exit/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/emacs/2017/12/03/til-emacs-toggle-debug-on-exit/</guid>
        
        <category>emacs</category>
        
        <category>debugging</category>
        
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>What's Falsy in JavaScript?</title>
        <description>&lt;p&gt;This is a question that comes up from time to time, and is sometimes a
surprising answer.&lt;/p&gt;

&lt;p&gt;“Falsy” is a term that generally means “These terms act as if they are
&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; when used in comparisons”. There’s a corresponding term
“Truthy” which generally means “everything else acts like
&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;”. These terms are used across many different languages, both
typed and untyped.&lt;/p&gt;

&lt;p&gt;In JavaScript, there is sometimes confusion and surprise. For clarity,
I turn to &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot; title=&quot;You don't know JS on
Github&quot;&gt;You Don’t Know
JS&lt;/a&gt; by one of my master teachers, &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot;&gt;Kyle Simpson
(@getify)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md#falsy-values&quot;&gt;Types &amp;amp; Grammar: Falsy Values&lt;/a&gt;,
Kyle explains how things get defined as Falsy:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All of JavaScript’s values can be divided into two categories:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;values that will become &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; if coerced to &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;everything else (which will obviously become &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;I’m not just being facetious. The JS spec defines a specific, narrow list of values that will coerce to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; when coerced to a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; value.&lt;/p&gt;

  &lt;p&gt;How do we know what the list of values is? In the ES5 spec, section 9.2 defines a &lt;code class=&quot;highlighter-rouge&quot;&gt;ToBoolean&lt;/code&gt; abstract operation, which says exactly what happens for all the possible values when you try to coerce them “to boolean.”&lt;/p&gt;

  &lt;p&gt;From that table, we get the following as the so-called “falsy” values list:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;+0, -0, and &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;””&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;That’s it. If a value is on that list, it’s a “falsy” value, and it will coerce to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; if you force a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; coercion on it.&lt;/p&gt;

  &lt;p&gt;By logical conclusion, if a value is not on that list, it must be on another list, which we call the “truthy” values list. But JS doesn’t really define a “truthy” list per se. It gives some examples, such as saying explicitly that all objects are truthy, but mostly the spec just implies: &lt;strong&gt;anything not explicitly on the falsy list is therefore truthy&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the term “coersion” is new to you, read &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md#falsy-values&quot;&gt;the whole chapter on Coercion&lt;/a&gt;
for a deeper understanding. Briefly, “coercion” means when you try to
change the type of an expression into another in a programming
language. We do this a lot in JavaScript when you might not realize
it. A &lt;em&gt;very&lt;/em&gt; common
(&lt;span style=&quot;color:red;font-weight:bold&quot;&gt;but somewhat dangerous&lt;/span&gt;)
JS idiom is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;// a guard clause; `foo` is coerced to a boolean by the `!` operator&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;// carry on with the rest of blah&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; is not explicitly a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; value, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, when checking to make sure you’re not operating on
such a value, it is &lt;em&gt;coerced&lt;/em&gt; into one (using that &lt;code class=&quot;highlighter-rouge&quot;&gt;.ToBoolean&lt;/code&gt; Kyle
mentions above.) This idiom is used a lot in functions as a guard
clause to prevent mischief from callers.&lt;/p&gt;

&lt;p&gt;You might also see this instead of an early return:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;// a guard clause, `foo` is coerced to a boolean by the `if`&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;// statement directly&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;c1&quot;&gt;// carry on with `blah` knowing that `foo` is not `null` or `undefined`&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, with both of these idioms, there can be problems with some
of the other definitions for falsy: what happend when you intend to
pass in a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;In such a case, I step back and stop using coercion and go for
explicitness, and the idiom becomes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;// a guard clause, explicit checking&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;c1&quot;&gt;// carry on with `blah` knowing *exactly* that `foo` is not `null` or `undefined`&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So there we have it. The ECMAScript specification Kyle refers to above
is at &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-toboolean&quot;&gt;http://www.ecma-international.org/ecma-262/6.0/#sec-toboolean&lt;/a&gt;
if you’re interested in reading it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you found this useful, please go visit Kyle’s site
&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot; title=&quot;You
Don't Know JS Series by Kyle Simpson (@getify) on Github.com&quot;&gt;You-Dont-Know-JS&lt;/a&gt; and
give him some love. Buy the books, become a patreon!&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Nov 2017 09:05:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/javascript/2017/11/23/whats-falsy-in-javascript/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/javascript/2017/11/23/whats-falsy-in-javascript/</guid>
        
        <category>javascript</category>
        
        <category>falsy</category>
        
        <category>coercion</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>TIL: Capybara.has_current_path</title>
        <description>&lt;p&gt;I’m an infrequent user of Capybara, preferring other means to
test. But I reach for it when it’s needed. That being said, I haven’t
been up to speed on all the features of more recent releases.&lt;/p&gt;

&lt;p&gt;One thing that I’d been used to in writing tests is explicitly putting
in a &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; when the stack is switching pages in the middle of a
test, and checking the &lt;code class=&quot;highlighter-rouge&quot;&gt;current_url&lt;/code&gt; matches a given path.&lt;/p&gt;

&lt;p&gt;Instead, as of version 2.5, there’s a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;has_current_path?&lt;/code&gt;
(which evolves to &lt;code class=&quot;highlighter-rouge&quot;&gt;have_current_path&lt;/code&gt; in RSpec matchers)
that works with Capybara’s wait time (i.e., the test waits until the
current path satisifies the argument given) which gives a much cleaner
test than inserting sleeps.&lt;/p&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item is deleted when clicked&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;n&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Delete This Item&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{/items$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;becomes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item is deleted when clicked&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;n&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Delete This Item&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_current_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{/items$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;has_current_path?&lt;/code&gt; will take either a string or a regexp.)&lt;/p&gt;

&lt;p&gt;I was led to this
from
&lt;a href=&quot;https://stackoverflow.com/questions/33533512/test-page-redirection-with-capybara-rspec/33535004#33535004&quot;&gt;https://stackoverflow.com/questions/33533512/test-page-redirection-with-capybara-rspec/33535004#33535004&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Nov 2017 09:54:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/testing/2017/11/20/til-capybara-dot-has-current-path/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/testing/2017/11/20/til-capybara-dot-has-current-path/</guid>
        
        <category>testing</category>
        
        <category>rails</category>
        
        <category>capybara</category>
        
        <category>wait-time</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>TIL: Capybara fill_in wants the id, not the CSS selector id</title>
        <description>&lt;p&gt;So today I learned that one should pay closer attention to what the
documetation says instead of just assuming you already know. RTFM^2.&lt;/p&gt;

&lt;p&gt;In Capybara, you can fill in fields in forms using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.fill_in()&lt;/code&gt;
method. In
&lt;a href=&quot;http://www.rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Actions#fill_in-instance_method&quot;&gt;the documentation&lt;/a&gt;
it discusses the types of locators you can use:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Locate a text field or text area and fill it in with the given text
The field can be found via its name, id or label text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It doesn’t say &lt;em&gt;anything&lt;/em&gt; about using a CSS selector!&lt;/p&gt;

&lt;p&gt;So: this does not work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@modal.fill_in(&quot;#new-job-number-input-#{@job.id}&quot;, with: &quot;999&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this, however, &lt;strong&gt;DOES&lt;/strong&gt; work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@modal.fill_in(&quot;new-job-number-input-#{@job.id}&quot;, with: &quot;999&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That one, single “#” at the beginning of the string was throwing me
off, causing me to reach for other sorts of shenannigans to find the
field to fill in.&lt;/p&gt;

&lt;p&gt;Hooray, persistence!&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Nov 2017 14:12:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/testing/2017/11/16/til-capybara-fill-in-wants-the-id-not-the-css-selector-id/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/testing/2017/11/16/til-capybara-fill-in-wants-the-id-not-the-css-selector-id/</guid>
        
        <category>capybara</category>
        
        <category>rails</category>
        
        <category>testing</category>
        
        <category>forms</category>
        
        <category>fill_in</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Making Capybara wait a little longer for just one test</title>
        <description>&lt;p&gt;I needed to add some time to a Capybara test that was checking some
AJAX in my code. I didn’t want to increase the waiting time overall,
just for this one particular transaction.&lt;/p&gt;

&lt;p&gt;Capybara has a &lt;code class=&quot;highlighter-rouge&quot;&gt;default_wait_time&lt;/code&gt; setting in the configuration, so it
makes sense there’s a way to set wait time some other way that’s &lt;em&gt;not&lt;/em&gt;
the default.&lt;/p&gt;

&lt;p&gt;I couldn’t find anything in the readme, and I didn’t know what to
search for in the docs. I entered a general set of search terms in
google, to no particular avail. I finally settled on the rather brute
force desperation “How do I change Capybara’s wait time for just one
test?” and got a page at reddit that covered it exactly:
&lt;a href=&quot;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/&quot;&gt;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The top two answers provide the best solutions, I think, as they
expose features available in Capybara that I didn’t know existed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;using_wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;# .. run your test in this block&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;# .. and it will wait n seconds&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;# .. for items to appear in the page&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm1fe1/&quot;&gt;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm1fe1/&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#my_thing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;wait: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;# .. the above will wait 5 seconds for&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;c1&quot;&gt;# .. `#my_button` item to appear on the page&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm383m/&quot;&gt;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm383m/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty dang cool!&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Nov 2017 08:29:00 -0800</pubDate>
        <link>https://tamouse.github.io//swaac/testing/2017/11/15/making-capybara-wait-a-little-longer-for-just-one-test/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/testing/2017/11/15/making-capybara-wait-a-little-longer-for-just-one-test/</guid>
        
        <category>capybara</category>
        
        <category>testing</category>
        
        <category>delay</category>
        
        <category>using_wait_time</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Gerald Wienberg: My most challenging experience as a software developer</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.geraldmweinberg.com/&quot;&gt;Gerald Weinberg&lt;/a&gt; is a long-time
writer and commenter on the field of software enginering. I’ve been a
longtime fan of Jerry, and had the privilege and pleasure of meeting
him, working with him on some stuff back at HP, and attending one of
his seminars.&lt;/p&gt;

&lt;p&gt;He’s always proven faithful to my vision of how the field of software
development should be run, in a humane, thoughtful, and intelligent
fashion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;Here’s his answer&lt;/a&gt; to the question: “What was your most challenging
experience in software development?”&lt;/p&gt;

&lt;p&gt;The moral at the end is really the most important take-away for all of
us learning and working in this area:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Moral: We may think that hardware and software errors are
challenging, but nothing matches the difficulty of confronting human
errors—especially when those humans are managers willing to hide
errors in order to make schedules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software development is ultimately a human system, focused on solving
human problems. This also brings into it all the human fallabilities
and problems. Keep clear what’s important.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Oct 2017 17:13:00 -0700</pubDate>
        <link>https://tamouse.github.io//swaac/people/2017/10/29/gerald-wienberg-my-most-challenging-experience-as-a-software-developer/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/people/2017/10/29/gerald-wienberg-my-most-challenging-experience-as-a-software-developer/</guid>
        
        <category>jerry</category>
        
        <category>weinberg</category>
        
        <category>people</category>
        
        
        <category>people</category>
        
      </item>
    
      <item>
        <title>TIL: React setState is async, and has a callback</title>
        <description>&lt;p&gt;While this wasn’t &lt;em&gt;today&lt;/em&gt; exactly, I just learned this recently, and
it made a difference for something I was working on.&lt;/p&gt;

&lt;p&gt;I had been looking around for a way to determine if the component’s
state had changed as I expected, mostly doing some debugging and
tracing, I discovered that &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; is an asynchronous function. The
second parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; is a callback function that runs when
the state has finished updating.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/a/42038724/742446&quot;&gt;discussion&lt;/a&gt; at
&lt;a href=&quot;https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback&quot;&gt;stackoverflow&lt;/a&gt; gives a quite detailed explanation,
which is great.&lt;/p&gt;

&lt;p&gt;In my case, doing a simplistic &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; debugging thing, I ended
up with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;handleUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;na&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someOtherCrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are much better reasons for having that callback, of course, but
this is the one I found a need for at the time.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Oct 2017 17:35:00 -0700</pubDate>
        <link>https://tamouse.github.io//swaac/webdev/2017/10/27/til-react-setstate-is-async-and-has-a-callback/</link>
        <guid isPermaLink="true">https://tamouse.github.io//swaac/webdev/2017/10/27/til-react-setstate-is-async-and-has-a-callback/</guid>
        
        <category>webdev</category>
        
        <category>react</category>
        
        <category>setState</category>
        
        
        <category>webdev</category>
        
      </item>
    
  </channel>
</rss>
<!-- touch 1 -->

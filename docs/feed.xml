<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software as a Craft</title>
    <description>The development blog of tamouse</description>
    <link>http://swaac.tamouse.org/</link>
    <atom:link href="http://swaac.tamouse.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 04 Sep 2017 17:40:07 -0500</pubDate>
    <lastBuildDate>Mon, 04 Sep 2017 17:40:07 -0500</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>PP 3: Use the Top-Down Approach</title>
        <description>&lt;p&gt;Ledgard’s 3rd Proverb is “Use the Top-Down Approach”, which means to
design our code in levels, from most abstract to most detailed.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/programming/2017/07/23/pp-introduction/&quot;&gt;Programming Proverbs Introduction&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It builds on the first two proverbs directly, and introduces the idea
of &lt;em&gt;postponement of details&lt;/em&gt; by making &lt;em&gt;abstractions&lt;/em&gt;, which are
&lt;em&gt;successively refined&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This approach tends to favour the imperative (aka procedural) sort of
coding and can be useful in object-oriented programming. It’s perhaps
less useful in functional programming, but it still makes sense
conceptually that we’ll know a lot more about the big pieces of
something when we start than the details of implementation.&lt;/p&gt;

&lt;p&gt;Top-down also lends itself very well to the Test-/Behavior-Driven
development approach, as we should be testing and verifying each
level as we go along.&lt;/p&gt;

&lt;p&gt;On the other hand, it creates a need for a lot of mocking of
unimplemented code, which can create overblown test suites for no
apparent gain. Keep the mocks minimal and only to the point of testing
the logic of the level under test and don’t attempt to build
integration tests at first.&lt;/p&gt;

&lt;p&gt;Another advantage is that the top-down approach is helpful in keeping
our modules, classes, functions, procedures, and methods small. It
allows us to focus on just what’s important at this level of
abstraction.&lt;/p&gt;

&lt;p&gt;When creating our initial levels, it’s often helpful to write them
out in human language as comments. This can often help us derive
useful names for variables and methods, and to write the test
statements to be filled in as well.&lt;/p&gt;

&lt;h3 id=&quot;example-atm&quot;&gt;example: ATM&lt;/h3&gt;

&lt;p&gt;Most of us are familiar with an automated teller machine (ATM). If our
task was to write an interface, in a top-down approach, we might start
with this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;loop
  accept card
  validate customer

  loop
    gather request
    process request
    break loop if customer is finished

  return card
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then refine each step. Taking just “process request” step from
above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;when request is a
  deposit: process deposit
  withdrawal: process withdrawal
  balance check: process balance check
  purchase stamps: process stamp purchase
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(Some ATMs do a lot more than that, but you get the picture.)&lt;/p&gt;

&lt;p&gt;Being able to just write out the algorithm in plain human language
helps us to keep
to
&lt;a href=&quot;/programming/2017/07/29/pp-2-think-first-program-later/&quot;&gt;proverb 2: think first, program later&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Aug 2017 12:01:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/programming/2017/08/20/pp-3-use-the-top-down-approach/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/programming/2017/08/20/pp-3-use-the-top-down-approach/</guid>
        
        <category>programming</category>
        
        <category>proverbs</category>
        
        <category>top-down</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>GraphQL: Mutating an Object's State</title>
        <description>&lt;p&gt;In our project, we have a class, Job, that includes a state machine to
handle the different states the job can be in, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;:unscheduled&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;:scheduled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:in_progress&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:completed&lt;/code&gt; , etc.&lt;/p&gt;

&lt;p&gt;The various state transitions can include some extra logic, such as
setting or clearing dates, recording the transition step, and a few
other things. This means I can’t really use a typical mutation of just
sending up attributes that change.&lt;/p&gt;

&lt;p&gt;In addition, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-ruby&lt;/code&gt; gem with a root mutation that
breaks out into other mutations via the fields, I didn’t want to
populate that root mutation with a slew of entries.&lt;/p&gt;

&lt;p&gt;My approach was to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;transitionJob&lt;/code&gt; field in the root
mutation:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RootMutation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GraphQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;RootMutation&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Root Mutation for Kickserv Application&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:transitionJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JobGraphType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mutation that transitions a Job to a new state&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Job ID (not the job_number)&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Action to perform on Job: (start|stop|restart|cancel|hold|unhold)&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JobTransitionMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# other mutations...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I created the PORO &lt;code class=&quot;highlighter-rouge&quot;&gt;JobTransitionMutation&lt;/code&gt; to handle the actions
getting passed up to the graphql controller. This was also an
opportunity to refactor the actual transitions into and event PORO as
the same code occurred in two standard Rails controllers as well.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JobTransitionMutation&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;JobStateMachineEventCrank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;public_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reload&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Down in the React client, the query to match that mutation looks like:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jobTransitionMutation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gql&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JobTransitionMutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;transitionJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;completed_on&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A few React components create buttons that the user can press to
change the various job states that are wrapped with the query above.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This took me a while to figure out, bouncing back and forth between
the ruby side and the javascript side, and digging through a lot of
documentation. I want to give a shoutout to the great folks
at &lt;a href=&quot;https://www.apollodata.com/&quot;&gt;Apollo Data&lt;/a&gt; for their excellent
documentation and to &lt;a href=&quot;https://github.com/rmosolgo&quot;&gt;Robert Mosolgo&lt;/a&gt; and
the GitHub team for
the &lt;a href=&quot;https://github.com/rmosolgo/graphql-ruby&quot;&gt;graphql-ruby&lt;/a&gt; gem.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Future plans include converting the action into an Enum type.&lt;/p&gt;

&lt;p&gt;I’m not quite sure what to do about the number of mutations we’re
going to need. Nearly everything in the client hangs off the root node
of the account, which includes job, estimates, invoices, customers,
employees, and a whole raft of other things. The root mutation seems
like it’s going to end up as large as the Rails &lt;code class=&quot;highlighter-rouge&quot;&gt;routes.rb&lt;/code&gt; file if
I’m not careful.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Aug 2017 11:08:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/webdev/2017/08/20/graphql-mutating-an-objects-state/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/webdev/2017/08/20/graphql-mutating-an-objects-state/</guid>
        
        <category>graphql</category>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>webdev</category>
        
      </item>
    
      <item>
        <title>Hack of the Day: Comments in package.json?</title>
        <description>&lt;p&gt;You know how you can’t have JavaScript comments in a .JSON file?
Sometimes you want them, thus this hack for &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’m probably not the first person to think of this, but no one’s ever
suggested it to me.&lt;/p&gt;

&lt;p&gt;JSON files cannot have comments. But many of our configuration files
are in JSON, and could benefit from some commentary. For example, why
did you nail that particular version of &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt; ? (A true
story that happened today.)&lt;/p&gt;

&lt;p&gt;Comments are a sometimes good, sometimes bad thing. I like comments
that give explanations for why things are the way they are, not so
much what things are, or how things are done.&lt;/p&gt;

&lt;p&gt;In this case, I wanted to leave a breadcrumb where my project mates
(now and future) would be able to find some reason for a particular
version being nailed instead of being allowed to increase with minor
version changes.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file has a set of required keys
(see &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;https://docs.npmjs.com/files/package.json&lt;/a&gt; for details). It
doesn’t seem to mind if there are other keys, in fact several other
things utilize keys to configure themselves (e.g. Jest).&lt;/p&gt;

&lt;p&gt;There isn’t a “comments” key, however.&lt;/p&gt;

&lt;p&gt;So I decided to make use of it in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file by creating
an array of comments offering that “wth were you thinking” commentary
for future devs.&lt;/p&gt;

&lt;p&gt;Here’s the top fragment of the file:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;comments&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;There is a bug in webpack-dev-server v2.7.0: https://github.com/webpack/webpack-dev-server/issues/1025&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nailing redux to v3.5.2 because v3.7.1 is breaking the dispatch maps&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and the regular parts of the file continue after that.&lt;/p&gt;

&lt;p&gt;I think I’ll improve on that by adding the branch / commit where those
comments come into play.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 15:32:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/hacks/2017/08/08/hack-of-the-day-comments-in-package-dot-json/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/hacks/2017/08/08/hack-of-the-day-comments-in-package-dot-json/</guid>
        
        <category>hacks</category>
        
        <category>package.json</category>
        
        <category>comments</category>
        
        
        <category>hacks</category>
        
      </item>
    
      <item>
        <title>TIL: Using enzyme's shallow render with MemoryRouter doesn't work</title>
        <description>&lt;p&gt;Today, I was writing some React code that used the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; component
from &lt;code class=&quot;highlighter-rouge&quot;&gt;react-router-dom&lt;/code&gt;, and writing the Jest tests to go along with
that.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; requires a router and a history component to be available to
it, and the recommended tool for testing this is to use
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;enzyme&lt;/code&gt; testing package that works with Jest provides both deep
and shallow renderers. Shallow rendering is good for doing snapshot
testing on components where you don’t want to or haven’t yet finalized
the underlying components.&lt;/p&gt;

&lt;p&gt;The MemoryRouter, however, provides a history object that generates a
collection of objects with randomly generated keys, so when you
shallow render your component under test, wrapped in the MemoryRouter,
you can’t use the snapshot, because it changes every time.&lt;/p&gt;

&lt;p&gt;I got around this particular problem by deep rendering, using
&lt;code class=&quot;highlighter-rouge&quot;&gt;enzyme&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; function. The component under test was very
simple, just a few &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; components, and no other components I was
developing underneath it.&lt;/p&gt;

&lt;p&gt;There will likely be cases coming up that cannot be addressed well
with a deep render as a unit test, however, in which case I will have
to rely more on writing many more expectations.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from 'react'
import {MemoryRouter} from 'react-router'
import {Link} from 'react-router-dom'
import {render, shallow} from 'enzyme'

const MyComp = props =&amp;gt; {
  const {href, linkText, icon} = props
  const iconClass = `fa fa-sm fa-${icon}`
  return (&amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;Some header&amp;lt;/h2&amp;gt;
        &amp;lt;Link to={href}&amp;gt;{linkText}&amp;lt;i className={iconClass}/&amp;gt;&amp;lt;/Link&amp;gt;
      &amp;lt;/div&amp;gt;)
}


test(&quot;This will work with a deep render&quot;, () =&amp;gt; {
  const actual = render(&amp;lt;MemoryRouter&amp;gt;
    &amp;lt;MyComp href=&quot;http://example.com&quot; linkText=&quot;An Example&quot; icon=&quot;external-link&quot;/&amp;gt;
  &amp;lt;/MemoryRouter&amp;gt;)
  expect(actual).toMatchSnapshot()
})

test(&quot;This will fail with a shallow render&quot;, () =&amp;gt; {
  const actual = shallow(&amp;lt;MemoryRouter&amp;gt;
    &amp;lt;MyComp href=&quot;http://example.com&quot; linkText=&quot;An Example&quot; icon=&quot;external-link&quot;/&amp;gt;
  &amp;lt;/MemoryRouter&amp;gt;)
  expect(actual).toMatchSnapshot()
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; &lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/Link.md&quot;&gt;https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/Link.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt; &lt;a href=&quot;https://reacttraining.com/react-router/core/api/MemoryRouter&quot;&gt;https://reacttraining.com/react-router/core/api/MemoryRouter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;React Router Testing &lt;a href=&quot;https://reacttraining.com/react-router/core/guides/testing&quot;&gt;https://reacttraining.com/react-router/core/guides/testing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 02 Aug 2017 10:54:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/testing/2017/08/02/TIL-enzyme-shallow-render-with-memoryrouter-doesnt-work/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/testing/2017/08/02/TIL-enzyme-shallow-render-with-memoryrouter-doesnt-work/</guid>
        
        <category>react</category>
        
        <category>react-router</category>
        
        <category>react-router-dom</category>
        
        <category>MemoryRouter</category>
        
        <category>jest</category>
        
        <category>enzyme</category>
        
        <category>testing</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>PP 2: Think First, Program Later</title>
        <description>&lt;p&gt;Next in the Programming Proverbs series: #2: Think First, Program
Later.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/programming/2017/07/23/pp-introduction/&quot;&gt;Programming Proverbs Introduction&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Page Contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#proverb-2-think-first-program-later&quot; id=&quot;markdown-toc-proverb-2-think-first-program-later&quot;&gt;Proverb #2: Think First, Program Later&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-will-i-write-this&quot; id=&quot;markdown-toc-how-will-i-write-this&quot;&gt;How will I write this?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-will-it-go&quot; id=&quot;markdown-toc-where-will-it-go&quot;&gt;Where will it go?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#is-it-already-solved-somewhere-else&quot; id=&quot;markdown-toc-is-it-already-solved-somewhere-else&quot;&gt;Is it already solved somewhere else?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#is-there-a-better-way-to-do-this&quot; id=&quot;markdown-toc-is-there-a-better-way-to-do-this&quot;&gt;Is there a better way to do this?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-questions&quot; id=&quot;markdown-toc-other-questions&quot;&gt;Other questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#more-thought-yields-less-code&quot; id=&quot;markdown-toc-more-thought-yields-less-code&quot;&gt;More thought yields less code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;proverb-2-think-first-program-later&quot;&gt;Proverb #2: Think First, Program Later&lt;/h2&gt;

&lt;p&gt;This proverb doesn’t need much updating, it’s still a fairly popular
proverb, oft-spoken. It really goes hand in hand
with
&lt;a href=&quot;/programming/2017/07/29/pp-1-define-the-problem-completely/&quot;&gt;the first proverb&lt;/a&gt; in
that you have to think about what you’re doing, or going to do, before
you begin it, in order to define the problem.&lt;/p&gt;

&lt;p&gt;But it does go a bit further as well.&lt;/p&gt;

&lt;p&gt;When given a story, feature, item, etc., that has a definition of the
problem, oft times we jump right in and start to implement it. But
there’s still questions to answer, even before that point, such as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how will I write this?&lt;/li&gt;
  &lt;li&gt;where will it go?&lt;/li&gt;
  &lt;li&gt;is it already solved somewhere else?&lt;/li&gt;
  &lt;li&gt;is there a better way to do this?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-will-i-write-this&quot;&gt;How will I write this?&lt;/h2&gt;

&lt;p&gt;Thinking about the algorithm or steps to complete the solution is
important. In the next proverb, “Use the top-down approach”, Ledgard
expresses this more completely, but even before that point, you want
to think through the approach to writing the code. This includes the
decision of whether you will follow TDD, or if you need to spike
something first, or if you need to go off and learn something more
about the problem, technology, language, environment, etc., perhaps
you should go write a small “toy” application that solves the problem
in a simpler context to get an understanding of the approach, etc.&lt;/p&gt;

&lt;h2 id=&quot;where-will-it-go&quot;&gt;Where will it go?&lt;/h2&gt;

&lt;p&gt;Organizing code is something worth thinking about before writing
it. There are lots of ways to organize code. Some may be determined by
the frameworks and languages you’re using, but even in those there
isn’t necessarily an exact location and so it requires your judgment
of the best place to put the code.&lt;/p&gt;

&lt;p&gt;Along with this, you need to decide where the test will live. Again,
testing frameworks may give you a lot of the answers, but it’s still
necessary to think about it.&lt;/p&gt;

&lt;h2 id=&quot;is-it-already-solved-somewhere-else&quot;&gt;Is it already solved somewhere else?&lt;/h2&gt;

&lt;p&gt;If something has been solved before, it’s often easier and simpler to
take that implementation and incorporate it. This isn’t always so, but
it’s worth looking. Reasons you want to do this include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the existing solution is proof that it can be done&lt;/li&gt;
  &lt;li&gt;it can save the time in the iteration&lt;/li&gt;
  &lt;li&gt;the existing solution can provide a blueprint for the current
solution if it can’t be directly used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reasons you may not want to use an existing solution are numerous, of
course, but those reasons shouldn’t preclude looking for one.&lt;/p&gt;

&lt;h2 id=&quot;is-there-a-better-way-to-do-this&quot;&gt;Is there a better way to do this?&lt;/h2&gt;

&lt;p&gt;When we approach a problem, we often only think of one way the problem
can be solved. There is a maxim called “Do the simplest thing that
works” that in practice often just turns into “Do the first thing you
can think of.” When you arrive at a way to solve a problem, ask
yourself if you can think of another way to do it. How can you make it
simpler?&lt;/p&gt;

&lt;p&gt;Test-driven development is a way to think through how to solve the
problem, but even here it’s tempting to start writing the test code
too early. Take a moment to write down just the test statements
themselves, such as:&lt;/p&gt;

&lt;p&gt;“it renders an enabled, green submit button when all the required
fields are set”&lt;/p&gt;

&lt;p&gt;The act of writing out the test cases gives you a much better idea of
how you’ll solve the problem.&lt;/p&gt;

&lt;p&gt;You might consider writing them not in a code file, but in a text
file, or even writing them in a notebook by hand. (Yes, archaic.)
But separating the thinking from doing is important enough that
changing the way the thoughts are recorded can help.&lt;/p&gt;

&lt;h2 id=&quot;other-questions&quot;&gt;Other questions&lt;/h2&gt;

&lt;p&gt;The questions above are most definitely &lt;em&gt;not&lt;/em&gt; the only questions to
consider before moving on to coding. Develop your own set of
questions, create a practice for yourself of asking those questions
and finding new ones to ask when you find the need.&lt;/p&gt;

&lt;p&gt;I can guarantee these aren’t the only questions I ask, either. Here’s
a few more:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How will I give input to the item?&lt;/li&gt;
  &lt;li&gt;How will I provide the results?&lt;/li&gt;
  &lt;li&gt;What information do I need besides the direct input?&lt;/li&gt;
  &lt;li&gt;What items need to be configurable?&lt;/li&gt;
  &lt;li&gt;Do I need to worry about environmental differences?&lt;/li&gt;
  &lt;li&gt;Is there anything I need to be concerned about when operationalizing
this?&lt;/li&gt;
  &lt;li&gt;Are there compositional parts of the solution I want to have be
interchangeable (i.e. via dependency injection, etc)?&lt;/li&gt;
  &lt;li&gt;What implementation decisions should I postpone until run time?
Which have to be determined at compile time? Which have to be
determined at deployment?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a couple of meta questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What questions are important to answer now? later?&lt;/li&gt;
  &lt;li&gt;What questions should I be asking?&lt;/li&gt;
  &lt;li&gt;What questions have I not considered?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the later proverbs should also provide questions to think
about up front.&lt;/p&gt;

&lt;h2 id=&quot;more-thought-yields-less-code&quot;&gt;More thought yields less code&lt;/h2&gt;

&lt;p&gt;I believe, ultimately, that the intent here is directly related to the
idea that the less code you have to write, the better. The more you
think the problem through before writing code, the fewer false starts
and abandoned lines of code you’ll have.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 11:24:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/programming/2017/07/29/pp-2-think-first-program-later/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/programming/2017/07/29/pp-2-think-first-program-later/</guid>
        
        <category>programming</category>
        
        <category>proverbs</category>
        
        <category>think-first-code-later</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>PP 1: Define the Problem Completely</title>
        <description>&lt;p&gt;Continuing in the Programming Proverb series, by Henry F. Ledgard.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/programming/2017/07/23/pp-introduction/&quot;&gt;Programming Proverbs Introduction&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#programming-proverb-1-define-the-problem-completely&quot; id=&quot;markdown-toc-programming-proverb-1-define-the-problem-completely&quot;&gt;Programming Proverb #1: Define the problem completely.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#successive-iterations-on-problem-definition&quot; id=&quot;markdown-toc-successive-iterations-on-problem-definition&quot;&gt;Successive Iterations on Problem Definition&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#but-whats-complete-enough&quot; id=&quot;markdown-toc-but-whats-complete-enough&quot;&gt;But what’s complete enough?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-what-is-the-item-to-be-created&quot; id=&quot;markdown-toc-1-what-is-the-item-to-be-created&quot;&gt;1: What is the item to be created&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-what-will-the-item-be-used-for-and-who-will-use-it&quot; id=&quot;markdown-toc-2-what-will-the-item-be-used-for-and-who-will-use-it&quot;&gt;2: What will the item be used for (and who will use it)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-how-will-we-know-the-item-meets-the-needs-of-1-and-2&quot; id=&quot;markdown-toc-3-how-will-we-know-the-item-meets-the-needs-of-1-and-2&quot;&gt;3: How will we know the item meets the needs of 1 and 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about-problems-we-dont-know-or-understand-completely&quot; id=&quot;markdown-toc-what-about-problems-we-dont-know-or-understand-completely&quot;&gt;What about problems we don’t know or understand completely?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;programming-proverb-1-define-the-problem-completely&quot;&gt;Programming Proverb #1: Define the problem completely.&lt;/h2&gt;

&lt;p&gt;This seems obvious, but it happens so often that we, as programmers,
begin to solve the problem sometimes even before it’s even
requested. Getting specifications is also hard, because it involves
talking about the desired result with people who don’t necessarily
speak our language.&lt;/p&gt;

&lt;p&gt;Problem-solving is fun, especially writing programs to do so. And yet,
the landscape is littered with software that didn’t solve the problem
it was intended for, or that cause new problems that didn’t exist
before.&lt;/p&gt;

&lt;h2 id=&quot;successive-iterations-on-problem-definition&quot;&gt;Successive Iterations on Problem Definition&lt;/h2&gt;

&lt;p&gt;Getting the specifications down as completely as possible is one of
those things that seems to fly in the face of agile programming, but
in fact it doesn’t. Each epic, story, task, chore, should strive to
get a complete enough statement of the problem to provide the
developer and the tester the ability to successfully complete it.&lt;/p&gt;

&lt;p&gt;Because we’ve learned that trying to get complete answers before we
begin often leads to overdesign and overspending for little value at
the end of the implementation, take an interative approach to problem
definition, along with everything else. This proverb, as all the
others we’ll see, isn’t intended to be taken by itself, all alone.&lt;/p&gt;

&lt;h2 id=&quot;but-whats-complete-enough&quot;&gt;But what’s complete enough?&lt;/h2&gt;

&lt;p&gt;People have different levels of understanding of problems; obvious
enough. If you’re writing a story you’re going to implement, it’s
likely that you’ll think you need a lot less information in the ticket
than if you were planning on having someone else implement it. The
fact is, though, that at the time we’re implementing the ticket, we’re
almost certainly removed from the moment we wrote it, and if it’s
someone else implementing, they may have never been in the
conversation. So it does make sense to be as thorough as you can in
stating the work to be done, and stating what success means for that
particular item.&lt;/p&gt;

&lt;p&gt;Complete enough needs to consist of answers to three questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is the feature to be created&lt;/li&gt;
  &lt;li&gt;What will the feature be used for (and who will use it)&lt;/li&gt;
  &lt;li&gt;How will we know the feature meets the needs of 1 and 2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unpacking each of those:&lt;/p&gt;

&lt;h2 id=&quot;1-what-is-the-item-to-be-created&quot;&gt;1: What is the item to be created&lt;/h2&gt;

&lt;p&gt;There are really an unlimited number of questions you could ask, but
it’s important that you ask questions about the item.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What should it do?&lt;/li&gt;
  &lt;li&gt;What’s the desired outcome?&lt;/li&gt;
  &lt;li&gt;What’s the range of input?&lt;/li&gt;
  &lt;li&gt;Where will it live?&lt;/li&gt;
  &lt;li&gt;Does it need anything else to work?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are meta questions to ask as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What information does the person implementing this need to know?&lt;/li&gt;
  &lt;li&gt;When should this item be implemented?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;h2 id=&quot;2-what-will-the-item-be-used-for-and-who-will-use-it&quot;&gt;2: What will the item be used for (and who will use it)&lt;/h2&gt;

&lt;p&gt;It’s important to understand why this item is being created, and who
cares about it. When you understand that, you have knowledge that
informs, directs, and constrains the solution.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Who uses the item? It may be an end user, an admin, another coder
(e.g. and API call), etc., the point is, there is &lt;em&gt;always&lt;/em&gt; someone
who’s going to use it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When, how, what will they use it for?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-how-will-we-know-the-item-meets-the-needs-of-1-and-2&quot;&gt;3: How will we know the item meets the needs of 1 and 2&lt;/h2&gt;

&lt;p&gt;This is the Test-Driven and Behaviour-Driven Testing part of the
problem definition. It’s the part where you validate the desired
outcome in the implementation of the item.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How are you going to know you’re done with the item?&lt;/li&gt;
  &lt;li&gt;How can you show you are done with the item?&lt;/li&gt;
  &lt;li&gt;How will you know you did not introduce new problems?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gherkin, the language of Cucumber, gives both the writer, the
implementer, and the verifier a common structure to work in, even if
it isn’t directly used in writing a test.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot; data-lang=&quot;gherkin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; Users are able to log in to their accounts

  &lt;span class=&quot;kn&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Given&lt;/span&gt; I am a user with an account

  &lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;When&lt;/span&gt; I visit the login page
    &lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt; I enter my username
    &lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt; I enter my password
    &lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt; I press the submit button
    &lt;span class=&quot;nf&quot;&gt;Then&lt;/span&gt; I am directed to my profile page&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;what-about-problems-we-dont-know-or-understand-completely&quot;&gt;What about problems we don’t know or understand completely?&lt;/h2&gt;

&lt;p&gt;This is really the most common case in software development. We don’t
tend to write the same software over and over, we get new problems,
new users, new knowledge domains, new, new, new. If it’s already been
solved, we try to rework the existing solution.&lt;/p&gt;

&lt;p&gt;So, because we don’t, or maybe even can’t understand a problem
completely, how does this fit in the proverb?&lt;/p&gt;

&lt;p&gt;Here is where iterative development, agile, spikes, and such things
makes it possible to move forward with what we do know, and let the
other parts reveal themselves. Is this the opposite of the proverb? In
some ways of looking at it, yes, very much so. Even so, as we start
out, each of the initial stories, features, items, we work on should
be given enough scrutiny to make us successful in moving to the next
step.&lt;/p&gt;

&lt;p&gt;This proverb and the next go hand in hand. Problem definition requires
thinking.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 09:12:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/programming/2017/07/29/pp-1-define-the-problem-completely/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/programming/2017/07/29/pp-1-define-the-problem-completely/</guid>
        
        <category>programming</category>
        
        <category>proverbs</category>
        
        <category>problem-definition</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>PP: Programming Proverbs, an Introduction</title>
        <description>&lt;p&gt;Back in 1975, Henry F. Ledgard published a small book called
“Programming Proverbs”, a book of 26 best practices for programming,
using Algol 60 as the explanatory language. This was followed up with
“Pascal with Style: Programming Proverbs”, which restated the
practices using Pascal as the language, which was the one I found and
read, since I was using Pascal at the time in University.&lt;/p&gt;

&lt;p&gt;I read the book voraciously, small though it was. Ledgard’s proverbs
were very apt, and I was pretty well interested in writing good
quality code even back then, not really wanting to settle for good
enough to pass the class.&lt;/p&gt;

&lt;p&gt;Many years, decades even, have passed since that time, and I’ve found
many new authors to read, and have gotten great guidance from
them. And even so, that little book of proverbs has stuck in my head,
forming a real foundation from which to approach the craft of software
development.&lt;/p&gt;

&lt;p&gt;I’m going to write a series of posts on these programming proverbs,
with the title tag “PP”, and a tag of “proverbs” if you want to sort
them out later.&lt;/p&gt;

&lt;p&gt;In this introduction, I’m going to list the proverbs. Subsequent posts
will go into more depth on them.&lt;/p&gt;

&lt;h2 id=&quot;the-proverbs&quot;&gt;The Proverbs&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/programming/2017/07/29/pp-1-define-the-problem-completely/&quot;&gt;Define the problem completely&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/programming/2017/07/29/pp-2-think-first-program-later/&quot;&gt;Think first, program later&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/programming/2017/08/20/pp-3-use-the-top-down-approach/&quot;&gt;Use the top-down approach&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Beware of other approaches.&lt;/li&gt;
  &lt;li&gt;Construct the program in logical units.&lt;/li&gt;
  &lt;li&gt;Use procedures.&lt;/li&gt;
  &lt;li&gt;Avoid unnecessary GOTOs.&lt;/li&gt;
  &lt;li&gt;Avoid side effects.&lt;/li&gt;
  &lt;li&gt;Get the syntax right now, not later.&lt;/li&gt;
  &lt;li&gt;Use good mnenonic names.&lt;/li&gt;
  &lt;li&gt;Use intermediate variables properly.&lt;/li&gt;
  &lt;li&gt;Leave loop variables alone.&lt;/li&gt;
  &lt;li&gt;Do not recompute constants within a loop.&lt;/li&gt;
  &lt;li&gt;Avoid implementation-dependent features.&lt;/li&gt;
  &lt;li&gt;Avoid tricks.&lt;/li&gt;
  &lt;li&gt;Build in debugging techniques.&lt;/li&gt;
  &lt;li&gt;Never assume the computer assumes anything.&lt;/li&gt;
  &lt;li&gt;Use comments.&lt;/li&gt;
  &lt;li&gt;Prettyprint.&lt;/li&gt;
  &lt;li&gt;Provide good documentation.&lt;/li&gt;
  &lt;li&gt;Hand-check the programming before running it.&lt;/li&gt;
  &lt;li&gt;Get the program correct before trying to produce good output.&lt;/li&gt;
  &lt;li&gt;When the program is correct, produce good output.&lt;/li&gt;
  &lt;li&gt;Reread the manual.&lt;/li&gt;
  &lt;li&gt;Consider another language.&lt;/li&gt;
  &lt;li&gt;Don’t be afraid to start over.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;updating-the-proverbs&quot;&gt;Updating the proverbs&lt;/h2&gt;

&lt;p&gt;You many note some of those proverbs seem quite archaic in the world
of software development we are in today. How many people &lt;em&gt;ever&lt;/em&gt; step
through their code by hand before subjecting it to the compiler /
interpretter / browser?&lt;/p&gt;

&lt;p&gt;Also, with the rise of test-driven development, perhaps it’s more
likely that your code will be running the moment you hit the “Save”
key.&lt;/p&gt;

&lt;p&gt;Before you dismiss these, consider not just the time and practice of
the day (1975 is likely longer ago than most of my readers have been
alive). Consider, really, the intent: there is a reason for all of
these, and I’ll be bring those ideas up to date as I cover them.&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I owe a &lt;em&gt;great&lt;/em&gt; deal to Mr. Ledgard. I don’t know if he’s still with
us, but as a teacher of a very young and enthusiastic computer science
student back in the 1970’s, he meant a lot. As I write these, I know I
would not be anywhere near the craftsperson I am with him.&lt;/p&gt;

&lt;p&gt;As these works are no longer in print, I hope the spirit of sharing
these proverbs for helping new software developers acquire the
everyday skills of the craft will cause you to seek out these books,
in order to possibly get them updated and republished.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Jul 2017 12:24:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/programming/2017/07/23/pp-introduction/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/programming/2017/07/23/pp-introduction/</guid>
        
        <category>programming</category>
        
        <category>style</category>
        
        <category>proverbs</category>
        
        <category>craft</category>
        
        <category>improving</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>TIL: ApolloClient Authentication (graphql)</title>
        <description>&lt;p&gt;Continuing to work on the GraphQL Client and Server project at work,
today I learned how to authenticate using ApolloClient.&lt;/p&gt;

&lt;p&gt;(Note: there’s lots I’ve learned the past couple of weeks, but I
haven’t gotten to write everything up. This is just today’s big
learning.)&lt;/p&gt;

&lt;p&gt;It turns out that authenticating is rather easy when you’re working in
a same origin situation, i.e., the React Apollo client is calling an
endpoint from the same domain the React client was downloaded from.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://dev.apollodata.com/react/auth.html&quot;&gt;Authentication&lt;/a&gt; page
for the React Apollo client is very straight-forward in it’s
explanation. Since the application is using Cookies to keep the
authentication for the app, the following code works well:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// source: client/src/apolloClient.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApolloClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createNetworkInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-apollo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;networkInterface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createNetworkInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/graphql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'same-origin'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApolloClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;networkInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The essential bit is tne &lt;code class=&quot;highlighter-rouge&quot;&gt;credentials: 'same-origin'&lt;/code&gt;
option. ApolloClient knows how to handle these and builds the request
header with the appropriate cookies.&lt;/p&gt;

&lt;p&gt;I’m sort of embarassed how long it took me to figure out that this was
the solution to the problem I was having, since all I was seeing was
an Internal Server Error.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jul 2017 02:19:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/webdev/2017/07/22/til-apolloclient-authentication-graphql/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/webdev/2017/07/22/til-apolloclient-authentication-graphql/</guid>
        
        <category>graphql</category>
        
        <category>react</category>
        
        <category>apollo-client</category>
        
        
        <category>webdev</category>
        
      </item>
    
      <item>
        <title>99 Bottles of OOP</title>
        <description>
</description>
        <pubDate>Fri, 07 Jul 2017 08:51:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/books/2017/07/07/99-bottles-of-oop/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/books/2017/07/07/99-bottles-of-oop/</guid>
        
        <category>books</category>
        
        <category>oop</category>
        
        <category>object-oriented-programming</category>
        
        <category>sandi-metz</category>
        
        <category>katrina-owen</category>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Playing games with the :checked pseudo-selector</title>
        <description>&lt;p&gt;I’m not sure what made me think of this, but I got a wild hair and
thought I’d try it out.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:checked&lt;/code&gt; CSS pseudo-selector lets you select a &lt;em&gt;checked&lt;/em&gt;
checkbox or radio button. The question I wondered, would this be a
cheap-azz way of making a sliding sidebar? And the answer is, yes it
could.&lt;/p&gt;

&lt;p&gt;Over at &lt;a href=&quot;https://codepen.io/tamouse/pen/YQjVNb?editors=1100&quot;&gt;codepen&lt;/a&gt; I left a pen showing just that:&lt;/p&gt;

&lt;iframe height=&quot;265&quot; scrolling=&quot;no&quot; title=&quot;what can you do with :checked?&quot; src=&quot;//codepen.io/tamouse/embed/YQjVNb/?height=265&amp;amp;theme-id=0&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/tamouse/pen/YQjVNb/&quot;&gt;what can you do with :checked?&lt;/a&gt; by Tamara Temple (&lt;a href=&quot;https://codepen.io/tamouse&quot;&gt;@tamouse&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;

&lt;p&gt;Some of the interesting bits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The body is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flex-direction: row&lt;/code&gt;, which
would normally put the 3 major body parts, &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aside&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; horizontally, but…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The input checkbox is positioned absolute taking it out of the flex
flow, so only the &lt;code class=&quot;highlighter-rouge&quot;&gt;aside&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; are flexed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After setting everything up for the “normal” state, with the
checkbox &lt;em&gt;un&lt;/em&gt;checked, and the sidebar &lt;em&gt;hidden&lt;/em&gt;, I added the last CSS
rule to display the sidebar when the input checkbox is checked.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;normal-state&quot;&gt;normal state&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;checked-state&quot;&gt;checked state&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.sidebar-toggle&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:checked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inherit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, this could be taken in all sorts of directions, but I
wanted to try this out to see if it works.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Jul 2017 01:25:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/css/2017/07/06/playing-games-with-the-checked-pseudo-selector/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/css/2017/07/06/playing-games-with-the-checked-pseudo-selector/</guid>
        
        <category>css</category>
        
        <category>checked</category>
        
        
        <category>css</category>
        
      </item>
    
  </channel>
</rss>
<!-- touch 1 -->

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software as a Craft</title>
    <description>The development blog of tamouse</description>
    <link>http://swaac.tamouse.org/</link>
    <atom:link href="http://swaac.tamouse.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 23 Nov 2017 09:59:11 -0600</pubDate>
    <lastBuildDate>Thu, 23 Nov 2017 09:59:11 -0600</lastBuildDate>
    <generator>Jekyll v3.6.0.pre.beta1</generator>
    
      <item>
        <title>What's Falsy in JavaScript?</title>
        <description>&lt;p&gt;This is a question that comes up from time to time, and is sometimes a
surprising answer.&lt;/p&gt;

&lt;p&gt;“Falsy” is a term that generally means “These terms act as if they are
&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; when used in comparisons”. There’s a corresponding term
“Truthy” which generally means “everything else acts like
&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;”. These terms are used across many different languages, both
typed and untyped.&lt;/p&gt;

&lt;p&gt;In JavaScript, there is sometimes confusion and surprise. For clarity,
I turn to &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot; title=&quot;You don't know JS on
Github&quot;&gt;You Don’t Know
JS&lt;/a&gt; by one of my master teachers, &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot;&gt;Kyle Simpson
(@getify)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md#falsy-values&quot;&gt;Types &amp;amp; Grammar: Falsy Values&lt;/a&gt;,
Kyle explains how things get defined as Falsy:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All of JavaScript’s values can be divided into two categories:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;values that will become &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; if coerced to &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;everything else (which will obviously become &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;I’m not just being facetious. The JS spec defines a specific, narrow list of values that will coerce to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; when coerced to a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; value.&lt;/p&gt;

  &lt;p&gt;How do we know what the list of values is? In the ES5 spec, section 9.2 defines a &lt;code class=&quot;highlighter-rouge&quot;&gt;ToBoolean&lt;/code&gt; abstract operation, which says exactly what happens for all the possible values when you try to coerce them “to boolean.”&lt;/p&gt;

  &lt;p&gt;From that table, we get the following as the so-called “falsy” values list:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;+0, -0, and &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;””&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;That’s it. If a value is on that list, it’s a “falsy” value, and it will coerce to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; if you force a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; coercion on it.&lt;/p&gt;

  &lt;p&gt;By logical conclusion, if a value is not on that list, it must be on another list, which we call the “truthy” values list. But JS doesn’t really define a “truthy” list per se. It gives some examples, such as saying explicitly that all objects are truthy, but mostly the spec just implies: &lt;strong&gt;anything not explicitly on the falsy list is therefore truthy&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the term “coersion” is new to you, read &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md#falsy-values&quot;&gt;the whole chapter on Coercion&lt;/a&gt;
for a deeper understanding. Briefly, “coercion” means when you try to
change the type of an expression into another in a programming
language. We do this a lot in JavaScript when you might not realize
it. A &lt;em&gt;very&lt;/em&gt; common
(&lt;span style=&quot;color:red;font-weight:bold&quot;&gt;but somewhat dangerous&lt;/span&gt;)
JS idiom is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a guard clause; `foo` is coerced to a boolean by the `!` operator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// carry on with the rest of blah&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; is not explicitly a &lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; value, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, when checking to make sure you’re not operating on
such a value, it is &lt;em&gt;coerced&lt;/em&gt; into one (using that &lt;code class=&quot;highlighter-rouge&quot;&gt;.ToBoolean&lt;/code&gt; Kyle
mentions above.) This idiom is used a lot in functions as a guard
clause to prevent mischief from callers.&lt;/p&gt;

&lt;p&gt;You might also see this instead of an early return:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a guard clause, `foo` is coerced to a boolean by the `if`&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// statement directly&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// carry on with `blah` knowing that `foo` is not `null` or `undefined`&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, with both of these idioms, there can be problems with some
of the other definitions for falsy: what happend when you intend to
pass in a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;In such a case, I step back and stop using coercion and go for
explicitness, and the idiom becomes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a guard clause, explicit checking&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// carry on with `blah` knowing *exactly* that `foo` is not `null` or `undefined`&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So there we have it. The ECMAScript specification Kyle refers to above
is at &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-toboolean&quot;&gt;http://www.ecma-international.org/ecma-262/6.0/#sec-toboolean&lt;/a&gt;
if you’re interested in reading it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you found this useful, please go visit Kyle’s site
&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot; title=&quot;You
Don't Know JS Series by Kyle Simpson (@getify) on Github.com&quot;&gt;You-Dont-Know-JS&lt;/a&gt; and
give him some love. Buy the books, become a patreon!&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Nov 2017 09:05:00 -0600</pubDate>
        <link>http://swaac.tamouse.org/javascript/2017/11/23/whats-falsy-in-javascript/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/javascript/2017/11/23/whats-falsy-in-javascript/</guid>
        
        <category>javascript</category>
        
        <category>falsy</category>
        
        <category>coercion</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>TIL: Capybara.has_current_path</title>
        <description>&lt;p&gt;I’m an infrequent user of Capybara, preferring other means to
test. But I reach for it when it’s needed. That being said, I haven’t
been up to speed on all the features of more recent releases.&lt;/p&gt;

&lt;p&gt;One thing that I’d been used to in writing tests is explicitly putting
in a &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; when the stack is switching pages in the middle of a
test, and checking the &lt;code class=&quot;highlighter-rouge&quot;&gt;current_url&lt;/code&gt; matches a given path.&lt;/p&gt;

&lt;p&gt;Instead, as of version 2.5, there’s a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;has_current_path?&lt;/code&gt;
(which evolves to &lt;code class=&quot;highlighter-rouge&quot;&gt;have_current_path&lt;/code&gt; in RSpec matchers)
that works with Capybara’s wait time (i.e., the test waits until the
current path satisifies the argument given) which gives a much cleaner
test than inserting sleeps.&lt;/p&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item is deleted when clicked&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Delete This Item&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{/items$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;becomes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;item is deleted when clicked&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Delete This Item&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_current_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{/items$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;has_current_path?&lt;/code&gt; will take either a string or a regexp.)&lt;/p&gt;

&lt;p&gt;I was led to this
from
&lt;a href=&quot;https://stackoverflow.com/questions/33533512/test-page-redirection-with-capybara-rspec/33535004#33535004&quot;&gt;https://stackoverflow.com/questions/33533512/test-page-redirection-with-capybara-rspec/33535004#33535004&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Nov 2017 09:54:00 -0600</pubDate>
        <link>http://swaac.tamouse.org/testing/2017/11/20/til-capybara-dot-has-current-path/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/testing/2017/11/20/til-capybara-dot-has-current-path/</guid>
        
        <category>testing</category>
        
        <category>rails</category>
        
        <category>capybara</category>
        
        <category>wait-time</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>TIL: Capybara fill_in wants the id, not the CSS selector id</title>
        <description>&lt;p&gt;So today I learned that one should pay closer attention to what the
documetation says instead of just assuming you already know. RTFM^2.&lt;/p&gt;

&lt;p&gt;In Capybara, you can fill in fields in forms using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.fill_in()&lt;/code&gt;
method. In
&lt;a href=&quot;http://www.rubydoc.info/github/teamcapybara/capybara/master/Capybara/Node/Actions#fill_in-instance_method&quot;&gt;the documentation&lt;/a&gt;
it discusses the types of locators you can use:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Locate a text field or text area and fill it in with the given text
The field can be found via its name, id or label text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It doesn’t say &lt;em&gt;anything&lt;/em&gt; about using a CSS selector!&lt;/p&gt;

&lt;p&gt;So: this does not work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@modal.fill_in(&quot;#new-job-number-input-#{@job.id}&quot;, with: &quot;999&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this, however, &lt;strong&gt;DOES&lt;/strong&gt; work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@modal.fill_in(&quot;new-job-number-input-#{@job.id}&quot;, with: &quot;999&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That one, single “#” at the beginning of the string was throwing me
off, causing me to reach for other sorts of shenannigans to find the
field to fill in.&lt;/p&gt;

&lt;p&gt;Hooray, persistence!&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Nov 2017 14:12:00 -0600</pubDate>
        <link>http://swaac.tamouse.org/testing/2017/11/16/til-capybara-fill-in-wants-the-id-not-the-css-selector-id/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/testing/2017/11/16/til-capybara-fill-in-wants-the-id-not-the-css-selector-id/</guid>
        
        <category>capybara</category>
        
        <category>rails</category>
        
        <category>testing</category>
        
        <category>forms</category>
        
        <category>fill_in</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Making Capybara wait a little longer for just one test</title>
        <description>&lt;p&gt;I needed to add some time to a Capybara test that was checking some
AJAX in my code. I didn’t want to increase the waiting time overall,
just for this one particular transaction.&lt;/p&gt;

&lt;p&gt;Capybara has a &lt;code class=&quot;highlighter-rouge&quot;&gt;default_wait_time&lt;/code&gt; setting in the configuration, so it
makes sense there’s a way to set wait time some other way that’s &lt;em&gt;not&lt;/em&gt;
the default.&lt;/p&gt;

&lt;p&gt;I couldn’t find anything in the readme, and I didn’t know what to
search for in the docs. I entered a general set of search terms in
google, to no particular avail. I finally settled on the rather brute
force desperation “How do I change Capybara’s wait time for just one
test?” and got a page at reddit that covered it exactly:
&lt;a href=&quot;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/&quot;&gt;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The top two answers provide the best solutions, I think, as they
expose features available in Capybara that I didn’t know existed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;using_wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# .. run your test in this block&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# .. and it will wait n seconds&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# .. for items to appear in the page&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm1fe1/&quot;&gt;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm1fe1/&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#my_thing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;wait: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# .. the above will wait 5 seconds for&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# .. `#my_button` item to appear on the page&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm383m/&quot;&gt;https://www.reddit.com/r/rails/comments/25xrdy/is_there_a_way_to_change_capybaras_wait_time_just/chm383m/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty dang cool!&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Nov 2017 08:29:00 -0600</pubDate>
        <link>http://swaac.tamouse.org/testing/2017/11/15/making-capybara-wait-a-little-longer-for-just-one-test/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/testing/2017/11/15/making-capybara-wait-a-little-longer-for-just-one-test/</guid>
        
        <category>capybara</category>
        
        <category>testing</category>
        
        <category>delay</category>
        
        <category>using_wait_time</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Gerald Wienberg: My most challenging experience as a software develoer</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.geraldmweinberg.com/&quot;&gt;Gerald Weinberg&lt;/a&gt; is a long-time
writer and commenter on the field of software enginering. I’ve been a
longtime fan of Jerry, and had the privilege and pleasure of meeting
him, working with him on some stuff back at HP, and attending one of
his seminars.&lt;/p&gt;

&lt;p&gt;He’s always proven faithful to my vision of how the field of software
development should be run, in a humane, thoughtful, and intelligent
fashion.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;Here’s his answer&lt;/a&gt; to the question: “What was your most challenging
experience in software development?”&lt;/p&gt;

&lt;p&gt;The moral at the end is really the most important take-away for all of
us learning and working in this area:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Moral: We may think that hardware and software errors are
challenging, but nothing matches the difficulty of confronting human
errors—especially when those humans are managers willing to hide
errors in order to make schedules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software development is ultimately a human system, focused on solving
human problems. This also brings into it all the human fallabilities
and problems. Keep clear what’s important.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Oct 2017 17:13:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/people/2017/10/29/gerald-wienberg-my-most-challenging-experience-as-a-software-develoer/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/people/2017/10/29/gerald-wienberg-my-most-challenging-experience-as-a-software-develoer/</guid>
        
        <category>jerry</category>
        
        <category>weinberg</category>
        
        <category>people</category>
        
        
        <category>people</category>
        
      </item>
    
      <item>
        <title>TIL: React setState is async, and has a callback</title>
        <description>&lt;p&gt;While this wasn’t &lt;em&gt;today&lt;/em&gt; exactly, I just learned this recently, and
it made a difference for something I was working on.&lt;/p&gt;

&lt;p&gt;I had been looking around for a way to determine if the component’s
state had changed as I expected, mostly doing some debugging and
tracing, I discovered that &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; is an asynchronous function. The
second parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; is a callback function that runs when
the state has finished updating.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/a/42038724/742446&quot;&gt;discussion&lt;/a&gt; at
&lt;a href=&quot;https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback&quot;&gt;stackoverflow&lt;/a&gt; gives a quite detailed explanation,
which is great.&lt;/p&gt;

&lt;p&gt;In my case, doing a simplistic &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; debugging thing, I ended
up with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;handleUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someOtherCrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are much better reasons for having that callback, of course, but
this is the one I found a need for at the time.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Oct 2017 17:35:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/webdev/2017/10/27/til-react-setstate-is-async-and-has-a-callback/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/webdev/2017/10/27/til-react-setstate-is-async-and-has-a-callback/</guid>
        
        <category>webdev</category>
        
        <category>react</category>
        
        <category>setState</category>
        
        
        <category>webdev</category>
        
      </item>
    
      <item>
        <title>TIL: Export Unwrapped GraphQL Components to make Unit Testing Possible</title>
        <description>&lt;p&gt;This was a sanity-saver.&lt;/p&gt;

&lt;p&gt;I’ve been writing some React container components to handle dealing
with some GraphQL mutations, and I wanted to unit test some of the
functions inside.&lt;/p&gt;

&lt;p&gt;Since I was only exporting the graphql-wrapped component, I felt a
little stuck in trying to come up with a way to mock the ApolloClient
in the ApolloProvider. It was getting crazy.&lt;/p&gt;

&lt;p&gt;I asked in the #react-apollo channel in the Apollo slack team, and got
a &lt;em&gt;great&lt;/em&gt; response:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tamouse [5:30 PM]
I’m looking for some guidance on doing unit testing with react-apollo components. Is there some kind of Mock I can set up for the ApolloProvider?


slightlytyler [5:32 PM]
@tamouse why not use the real provider and provide a mock network interface?

once you start testing with apollo / graphql it's not really a unit test anymore


tamouse [5:33 PM]
perhaps, but how do you test the functions inside a wrapped component?


slightlytyler [5:33 PM]
I render the unwrapped component with mock functions

that's a unit test imo


tamouse [5:33 PM]
so you export both wrapped and unwrapped forms?


slightlytyler [5:34 PM]
yup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wow.&lt;/p&gt;

&lt;p&gt;Captain Oblivious.&lt;/p&gt;

&lt;p&gt;This is the simplest way to do this, bar none.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the code, I can import the wrapped component:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./MyComp'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And in the test, I can import the &lt;em&gt;un&lt;/em&gt;-wrapped component:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./MyComp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So Cool!&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Oct 2017 18:02:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/graphql/2017/10/11/til-export-unwrapped-graphql-components-to-make-unit-testing-possible/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/graphql/2017/10/11/til-export-unwrapped-graphql-components-to-make-unit-testing-possible/</guid>
        
        <category>react</category>
        
        <category>react-apollo</category>
        
        <category>graphql</category>
        
        <category>testing</category>
        
        <category>jest</category>
        
        <category>unit-test</category>
        
        
        <category>graphql</category>
        
      </item>
    
      <item>
        <title>Talk: Learning React+GraphQL+Apollo with Rails GraphQL API All At Once</title>
        <description>&lt;p&gt;Last month, September 2017, I gave a talk twice on my experiences
learning React, GraphQl, Apollo Client, along with installing a
GraphQL API to an ancient legacy app, all at once.&lt;/p&gt;

&lt;p&gt;The version of the talk I gave at the JavaScript MN meetup was
recorded, and you can see it
here: &lt;a href=&quot;https://www.youtube.com/watch?v=udMfM4rh_1g&quot;&gt;https://www.youtube.com/watch?v=udMfM4rh_1g&lt;/a&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/udMfM4rh_1g?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;The version I gave the prior Monday at the Ruby MN meetup was much
longer, and included quite a bit of information on the Ruby GraphQL
API. Maybe someday it will all get filmed. :D&lt;/p&gt;

&lt;p&gt;In the meantime, the slides are up on Github
at &lt;a href=&quot;https://tamouse.github.io/Talk-Rails-GraphQL-React/#/&quot;&gt;https://tamouse.github.io/Talk-Rails-GraphQL-React/#/&lt;/a&gt; (The slide
repo is at &lt;a href=&quot;https://github.com/tamouse/Talk-Rails-GraphQL-React&quot;&gt;https://github.com/tamouse/Talk-Rails-GraphQL-React&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The repo that contains my sandbox / learning application is
at &lt;a href=&quot;https://github.com/tamouse/r5_graphql_react&quot;&gt;https://github.com/tamouse/r5_graphql_react&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Oct 2017 09:40:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/graphql/2017/10/02/talk-learning-react-plus-graphql-plus-apollo-with-rails-graphql-api-all-at-once/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/graphql/2017/10/02/talk-learning-react-plus-graphql-plus-apollo-with-rails-graphql-api-all-at-once/</guid>
        
        <category>graphql</category>
        
        <category>react</category>
        
        <category>apollo</category>
        
        <category>rails</category>
        
        <category>api</category>
        
        
        <category>graphql</category>
        
      </item>
    
      <item>
        <title>Fix: Make Mac key repeat work</title>
        <description>&lt;p&gt;This is a quick one, but I’m adding it because I couldn’t remember it.&lt;/p&gt;

&lt;p&gt;On Macs, the standard way holding down a key on the keyboard works in
a text area is to pop up a little menu for selecting international
characters.&lt;/p&gt;

&lt;p&gt;While this is cool, it’s also something that I never really use, while
I &lt;em&gt;do&lt;/em&gt; want to hold down the key to repeat characters.&lt;/p&gt;

&lt;p&gt;The System Preferences have all sorts of settings for the keyboard,
including setting up repeat-rates, and such things, &lt;em&gt;however&lt;/em&gt;, there
is nothing to turn off the pop-up-on-hold feature, nor is there any
indication that it’s turned on (or off).&lt;/p&gt;

&lt;p&gt;So it turns out to be something you need to run on the command line.&lt;/p&gt;

&lt;p&gt;The post at &lt;a href=&quot;https://superuser.com/questions/363252/how-to-enable-keyboard-repeat-on-a-mac#363266&quot;&gt;https://superuser.com/questions/363252/how-to-enable-keyboard-repeat-on-a-mac#363266&lt;/a&gt; holds the info. I’ll repeat it here
briefly, you can visit the page to see more context and comments.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;At the terminal type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; defaults write -g ApplePressAndHoldEnabled -bool false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll have to stop and start any apps you have open in order to see
the effect of this. You may as well log out and log back in if you
have a lot of them open. (You do &lt;em&gt;not&lt;/em&gt; need to restart your computer
as someone suggests, though of course that will work, too.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It seems like this value gets reset to Apple’s choice of &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; after
updates from time to time, so you may need to do this more than once.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Sep 2017 18:42:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/osx/2017/09/26/fix-make-mac-key-repeat-work/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/osx/2017/09/26/fix-make-mac-key-repeat-work/</guid>
        
        <category>osx</category>
        
        <category>keyrepeat</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Apollo graphql container for mutations</title>
        <description>&lt;p&gt;Similar to queries, the &lt;a href=&quot;http://dev.apollodata.com/&quot; title=&quot;ApolloData Developer Documentation&quot;&gt;Apollo&lt;/a&gt;  &lt;a href=&quot;http://dev.apollodata.com/react/&quot; title=&quot;Apollo React Client&quot;&gt;client&lt;/a&gt;  &lt;a href=&quot;http://dev.apollodata.com/react/api-graphql.html&quot; title=&quot;graphql API docs&quot;&gt;graphql&lt;/a&gt; HOC
wraps a React component with functionality in the properties.&lt;/p&gt;

&lt;p&gt;Different from the query side, for mutations it provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;mutate&lt;/code&gt;
function on &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; that is called to perform the mutation. The
&lt;code class=&quot;highlighter-rouge&quot;&gt;mutate&lt;/code&gt; function returns a Promise, so using the standard &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;.catch()&lt;/code&gt; chains work well.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;canonical&lt;/em&gt; form looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      Mutate
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gql&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`mutation { ... }`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dereferencing the &lt;code class=&quot;highlighter-rouge&quot;&gt;mutate&lt;/code&gt; function out of the properties in the
arguments list seems a popular thing to do. I prefer not to do this,
as I’d like to use more props.&lt;/p&gt;

&lt;p&gt;An example, which performs a basic Login function form, looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-router-dom'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-apollo'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logInMutation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gql&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`
mutation LogInUser($credentials: AuthProviderCredentials) {
  loginUser(credentials: $credentials)
  {token user {name email}}
}`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogIn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;mutate: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;loggedIn: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleSubmit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'checkbox'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;n&quot;&gt;handleSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;variables: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loginUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;token&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sessionStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;loggedIn: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loggedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;no&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/label&amp;gt;
          &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;no&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/label&amp;gt;
          &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;
        &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;
    )
  }
}

const LogInWithMutation = graphql(logInMutation)(LogIn)
export default LogInWithMutation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My small learning project supporting this learning is
at &lt;a href=&quot;https://github.com/tamouse/r5_graphql_react&quot;&gt;https://github.com/tamouse/r5_graphql_react&lt;/a&gt;. Feel free to
contribute, comment, etc. I’m still a beginner at this and would
appreciate feedback.&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Sep 2017 21:43:00 -0500</pubDate>
        <link>http://swaac.tamouse.org/webdev/2017/09/19/apollo-graphql-container-for-mutations/</link>
        <guid isPermaLink="true">http://swaac.tamouse.org/webdev/2017/09/19/apollo-graphql-container-for-mutations/</guid>
        
        <category>graphql</category>
        
        <category>apollo</category>
        
        <category>react</category>
        
        <category>mutations</category>
        
        
        <category>webdev</category>
        
      </item>
    
  </channel>
</rss>
<!-- touch 1 -->
